<html>
  <head>
      <script src="node_modules/vue/dist/vue.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/tween.js@16.3.4"></script>
      <script src="https://cdn.jsdelivr.net/npm/color-js@1.0.3"></script>
  </head>
  <body>
    <div id="animated-number-demo">
      <input v-model.number="number" type="number" step="20">
      <p>{{ animatedNumber }}</p>
    </div>
    <div id="color-demo">
      <input v-model="colorQuery" v-on:keyup.enter="updateColor" placeholder="Color">
      <button v-on:click="updateColor">Update</button>
      <p>Preview</p>
      <span v-bind:style="{backgroundColor: tweenedCSSColor}" class="colordemo-color-preview"></span>
      <p>{{ tweenedCSSColor }}</p>
    </div>
    <div id="reusing-animations">
      <input v-model.number="firstNumber" type="number" step="30"> +
      <input v-model.number="secondNumber" type="number" step="15"> =
      {{ result }}
      <p>
        <animated-integer v-bind:value="firstNumber"></animated-integer> +
        <animated-integer v-bind:value="secondNumber"></animated-integer> =
        <animated-integer v-bind:value="result"></animated-integer>
      </p>
    </div>
  </body>
  <style>
    .colordemo-color-preview {
      display: inline-block;
      width: 100px;
      height: 100px;
    }
  </style>
  <script>
    Vue.component('animated-integer', {
      template: '<span>{{ tweeningValue }}</span>',
      props: {
        value: {
          type: Number,
          required: true
        }
      },
      data: function() {
        return {
          tweeningValue: 0
        }
      },
      watch: {
        value: function (newValue, oldValue) {
          this.tween(oldValue, newValue);
        }
      },
      mounted: function() {
        this.tween(0, this.value)
      },
      methods: {
        tween: function(startValue, endValue) {
          var vm = this;
          function animate() {
            if (TWEEN.update()) {
              requestAnimationFrame(animate);
            }
          }

          new TWEEN.Tween({ tweeningValue: startValue })
            .to({ tweeningValue: endValue }, 500)
            .onUpdate(function(object) {
              updated = object * endValue;
              vm.tweeningValue = updated.toFixed(0);
            })
            .start();

          animate();
        }
      }
    })
    var animatedNumber = new Vue({
      el: '#animated-number-demo',
      data: {
        number: 0,
        animatedNumber: 0
      },
      watch: {
        number: function(newValue, oldValue) {
          var vm = this;
          function animate() {
            if (TWEEN.update()) {
              requestAnimationFrame(animate);
            }
          }

          new TWEEN.Tween({ tweeningNumber: oldValue })
            .easing(TWEEN.Easing.Quadratic.Out)
            .to({ tweeningNumber: newValue }, 500)
            .onUpdate(function() {
              vm.animatedNumber = this.tweeningNumber.toFixed(0);
            })
            .start();
          animate();
        }
      }
    });

    var Color = net.brehaut.Color;

    var colorDemo = new Vue({
      el: "#color-demo",
      data: {
        colorQuery: '',
        color: {
          red: 0,
          green: 0,
          blue: 0,
          alpha: 1
        },
        tweenedColor: {}
      },
      created: function() {
        this.tweenedColor = Object.assign({}, this.color);
      },
      watch: {
        color: function() {
          function animate() {
            if (TWEEN.update()) {
              requestAnimationFrame(animate);
            }
          }

          new TWEEN.Tween(this.tweenedColor)
            .to(this.color, 750)
            .start();

          animate();
        }
      },
      computed: {
        tweenedCSSColor: function() {
          return new Color({
            red: this.tweenedColor.red,
            green: this.tweenedColor.green,
            blue: this.tweenedColor.blue,
            alpha: this.tweenedColor.alpha
          }).toCSS();
        }
      },
      methods: {
        updateColor: function() {
          this.color = new Color(this.colorQuery).toRGB();
          this.colorQuery = '';
        }
      }
    });

    var reusingAnimations = new Vue({
      el: '#reusing-animations',
      data: {
        firstNumber: 20,
        secondNumber: 50
      },
      computed: {
        result: function() {
          return this.firstNumber + this.secondNumber;
        }
      }
    })
  </script>
</html>
