#1 - number of feet in 13 miles
print 5280 * 13

#2 number of seconds in 7h, 21 m, 37 seconds
print (7 * 60 * 60) + (21 * 60) + 37

#3 - perimeter of rectangle w=7, h=4
print (2 * 7) + (2 * 4)

#4 area of rectangle with sides 4 and 7
print 4 * 7

#5 circumference of circle with 8 radius, 3.14 for pi constant
print 2 * 8 * 3.14

#6 area of circle 
print 3.14 * 8 ** 2

#7 1000 dollars at 7 percent interest for 10 years
print 1000 * (1 + 0.01 * 7) ** 10

#8 - name tag
print "My name is" + " " + "Joe" + " " + "Warren"

#9 - name and age
print "Joe Warren" + " is " + str(52) + " years old"

#10 - distance between points (2,2) and (5.6)
print ((2 - 5) ** 2 + (2 - 6) ** 2) ** 0.5


#variable - placeholder, used to keep from recomputing

#variable can have underscore, case sensitive, cannot contain numbers
#give memorable names

#assign to variable with =

#examples

my_name = "Travis Harsch"
print my_name

my_age = 39
print my_age

#birthday
#my_age + 1

#my_age = my_age + 1

my_age += 1
#adds value on the right to the left, then stores result in left-side variable
print my_age

#the story of the magic pill
magic_pill = 30
print my_age - magic_pill

#temperature conversion
# c = 5 / 9 * (f - 32)

temp_Fahrenheit = 32
temp_Celsius =5.0 / 9.0 * (temp_Fahrenheit - 32)
print temp_Celsius

temp_Celsius = 100
temp_Fahrenheit = 9.0 / 5.0 * temp_Celsius + 32
print temp_Fahrenheit

#1  - miles to feet
feet = miles * 5280
print miles * 13

#2 - hours minutes seconds total
hours = 7
minutes = 21
seconds = 37
total_seconds = hours * 3600 + minutes * 60 + seconds

print str(hours) + " hours, " + str(minutes) + " minutes, and",
print str(seconds) + " seconds totals to " + str(total_seconds) + " seconds."

#3 = perimeter of rectangle
width = 4
height = 7
perimeter = width * 2 + height * 2
print "A rectangle " + str(width) + " inches wide and " + str(height),
print "inches high has a perimeter of " + str(perimeter) + " inches."

#4 - area of rectangle
width = 10
height = 10
area = width * height
print "A rectangle " + str(width) + " inches wide and " + str(height),
print "inches high has an area of " + str(area) + " inches."

#5 - circumference of circle
PI = 3.14
radius = 8
circumference = 2 * PI * radius
print "A circle with a radius of " + str(radius),
print "inches has a circumference of " + str(circumference) + " inches."

#6 area of circle
PI = 3.14
radius = 8
area = PI * radius ** 2
print "A circle with a radius of " + str(radius),
print "inches has an area of " + str(area) + " inches."

#7 - future value template
present_value = 1000
annual_rate = 7
years = 10

future_value = present_value * (1 + 0.01 * annual_rate) ** years
 
print "The future value of $" + str(present_value) + " in " + str(years),
print "years at an annual rate of " + str(annual_rate) + "% is $" + str(future_value) + "."

#8 - name tag template
first_name = "Joe"
last_name = "Warren"
name_tag = "My name is " + first_name + " " + last_name
print name_tag

#9 - name and age template
name = "Joe Warren"
age = 52
statement = name + " is " + str(age)
#10 - point distance template
x0 = 2
y0 = 2
x1 = 5
y1 = 6
distance = ((x0 - x1) ** 2 + (y0 - y1) ** 2) ** 0.5

print "The distance from (" + str(x0) + ", " + str(y0) + ") to", 
print "(" + str(x1) + ", " + str(y1) + ") is " + str(distance) + "."

#11 - Heron's formula
x0, y0 = 0, 0
x1, y1 = 3, 4
x2, y2 = 1, 1

a = ((x0 - x1) ** 2 + (y0 - y1) ** 2) ** 0.5
b = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
c = ((x0 - x2) ** 2 + (y0 - y2) ** 2) ** 0.5
s = (a + b + c) / 2
area = (s * (s - a) * (s - b) * (s - c)) ** 0.5

print "A triangle with vertices (" + str(x0) + "," + str(y0) + "),",
print "(" + str(x1) + "," + str(y1) + "), and",
print "(" + str(x2) + "," + str(y2) + ") has an area of " + str(area) + "."

Week 2
Functions in Python
# computes the area of a triangle (comment out what it does)
def triangle_area(base, height):     # header - ends in colon (define name of function, then inputs/parameters)
    area = (1.0 / 2) * base * height # body - all of body is indented (same level of indention - indicates end of function)
    return area                      # body - return outputs value (return = output)
functions only executed when called
function as a box - takes inputs, creates output - names exist only within functions
   calling the function

single-input function
# converts fahrenheit to celsius
def fahrenheit2celsius(fahrenheit):
    celsius = (5.0 / 9) * (fahrenheit - 32)
    return celsius

# test
   c1 = fahrenheit2celsius(32)
   c2 = fahrenheit2celsius(212)
   print c1, c2

#function within a function
# converts fahrenheit to kelvin
def fahrenheit2kelvin(fahrenheit):
    celsius = fahrenheit2celsius(fahrenheit)
    kelvin = celsius + 273.15
    return kelvin

# test
k1 = fahrenheit2kelvin(32)
k2 = fahrenheit2kelvin(212)
print k1, k2

#better to use existing functions instead of recalculating - fix one error instead of several

# prints hello, world!
def hello():
    print "Hello, world!"
#function without a return value
#python - value of none - shows up when there's no return statement

# test
hello()      # call to hello prints "Hello, world!"
h = hello()  # call to hello prints "Hello, world!" a second time
print h      # prints None since there was no return value

#problem - get the tens and ones digit of a numbers
num = 49
tens = num // 10
ones = num % 10
print tens, ones




# Remainder - modular arithmetic

# systematically restrict computation to a range
# long division - divide by a number, we get a quotient plus a remainder
# quotient is integer division //, the remainder is % (Docs)


#problem - get the tens and ones digit of a numbers
num = 49
tens = num // 10
ones = num % 10
print tens, ones
print 10 * tens + ones

#application - 24 hour clock

hour = 20
shift = 8
print (hour + shift) % 24

#application - screen wraparound

width = 800
position = 797
move = 5
position = (position + move) % width
print position

width = 800
position = 2
move = -5
position = (position + move) % width
print position


#data conversions
#convert an integer into string
#convert hour into 24-hour format "3:00" always print

hour = 3
ones = hour % 10
tens = hour // 10
print tens, ones
print tens, ones, ":00"
print str(tens), str(ones), ":00"
#string format - converts something into a string
print str(tens) + str(ones) + ":00"

# convert a string into numbers with int and float


#modules - import and module name

import simplegui #drawing

import math #math

import random #functions for random numbers


#1 - miles to feet
def miles_to_feet(miles):
    feet = miles * 5280
    return feet

# Tests
def test(miles):
    print str(miles) + " miles equals",
    print str(miles_to_feet(miles)) + " feet."

test(13)
test(57)
test(82.67)

#2 - total seconds in X hours, Y minutes, Z total_seconds
def total_seconds(hours, minutes, seconds):
    return (hours * 3600) + (minutes * 60) + (seconds)
    # Tests
# Student should not change this code.

def test(hours, minutes, seconds):
    """Tests the total_seconds functions."""
    
    print str(hours) + " hours, " + str(minutes) + " minutes, and",
    print str(seconds) + " seconds totals to",
    print str(total_seconds(hours, minutes, seconds)) + " seconds."

test(7, 21, 37)
test(10, 1, 7)
test(1, 0, 1)

#3 rectangle perimeter
def rectangle_perimeter(width, height):
    return width * 2 + height * 2

    def test(width, height):
        print "A rectangle " + str(width) + " inches wide and " + str(height),
        print "inches high has a perimeter of",
        print str(rectangle_perimeter(width, height)) + " inches."

    test(4, 7)
    test(7, 4)
    test(10, 10)

#4 - rectangle_area
def rectangle_area(width, height):
    return width * height
    def rectangle_area(width, height):
        return width * height

    ###################################################
    # Tests
    # Student should not change this code.

    def test(width, height):
        print "A rectangle " + str(width) + " inches wide and " + str(height),
        print "inches high has an area of",
        print str(rectangle_area(width, height)) + " square inches."

    test(4, 7)
    test(7, 4)
    test(10, 10)

#5 - circle circumference
def circle_circumference (radius):
    return radius * 2 * 3.14

# Tests
# Student should not change this code.

def test(radius):
	"""Tests the circle_circumference function."""
	
	print "A circle with a radius of " + str(radius),
	print "inches has a circumference of",
	print str(circle_circumference(radius)) + " inches."

test(8)
test(3)
test(12.9)

#6 - circle area 
import math
def circle_area (radius):
    return radius ** 2 * math.pi

###################################################
# Tests
# Student should not change this code.

def test(radius):
    print "A circle with a radius of " + str(radius),
    print "inches has an area of",
    print str(circle_area(radius)) + " square inches."

test(8)
test(3)
test(12.9)

#7 - future value
def future_value(present_value, annual_rate, years):
    return present_value * (1 + 0.01 * annual_rate) ** years

###################################################
# Tests
# Student should not change this code.

def test(present_value, annual_rate, years):
    """Tests the future_value function."""
    
    print "The future value of $" + str(present_value) + " in " + str(years),
    print "years at an annual rate of " + str(annual_rate) + "% is",
    print "$" + str(future_value(present_value, annual_rate, years)) + "."


###################################################
# Tests
# Student should uncomment ONLY ONE of the following at a time.

test(1000, 7, 10)
test(200, 4, 5)
test(1000, 3, 20)

#8 - name tag
def name_tag(first_name, last_name):
    return "My name is " + first_name + " " + last_name

#9 - name and age 
def name_and_age(name, age):
    return name + " is " + str(age) + " years old."

#10 - point distance
def point_distance (x0, y0, x1, y1)
    return point_distance = ((x0 - x1) ** 2 + (y0 - y1) ** 2) ** 0.5

#11 - triangle area from three points 
def triangle_area (x0, y0, x1, y1, x2, y2)
    a = ((x0 - x1) ** 2 + (y0 - y1) ** 2) ** 0.5
    b = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    c = ((x0 - x2) ** 2 + (y0 - y2) ** 2) ** 0.5
    s = (a + b + c) / 2
    return = (s * (s - a) * (s - b) * (s - c)) ** 0.5

#12 print digits
def print_digits(number):
    print "The tens digit is " + str(number // 10) + " and the ones digit is " + str(number % 10)

#13 - powerball
import random
def powerball():
    print "Today's numbers are " + str(random.randrange(1, 60)) " ," 
    print str(random.randrange(1, 60)) " ," 
    print str(random.randrange(1, 60)) " ," 
    print str(random.randrange(1, 60)) " ," 
    print str(random.randrange(1, 60)) " ," 
    print str(random.randrange(1, 60)) " and" 
    print str(random.randrange(1, 60)) ". The Powerball number is" 
    + str(random.randrange(1, 36)) " ,"


#Week 2B
#Boolean logic - operators - NOT, AND, OR
a = True 
b = False
c = True 
d = False

print a
print b
print not a
print a and b
print a or b

print (a and b) or (c and (not d))

#Comparison operators
#>
#<
#>=
#<=
#==
#!=

a = 7 > 3
print a

x = 8
y = 5
b = x >= y
print b

c = "Hello" == 'Hello'
print c
single = is assignment
double == is equal

d = 20.6 <= 18.3
print d

print (a and b) or (c and (not d))

##Conditionals
if, else
elif = else if - one if, one else, unlimited elifs

start function with is_ when writing Conditionals


###documentation string- three double quotes, inputs, outputs and relation

##Logic and Conditionals Practice
#1 - even numbers
def is_even(number):
    '''returns even/odd for a given number'''
    return (number % 2) == 0

#2 cool name bro
def is_cool(name):
    '''returns cool for three given names'''
    return (name == 'Stephen') or (name == 'John') or (name == 'Joe')

#3 - is it lunchtime - returns lunch at 11 am or noon, no lunch otherwise
def is_lunchtime(hour, is_am):
    '''returns lunchtime for 11 am or noon'''
    return (hour == 11 and is_am) or (hour == 12 and not is_am)
    
#4 - leap year 
def is_leap_year(year):
    '''returns leap year for divisible by four, not by 100, by 400'''
    return ((year % 4) == 0 and ((year % 100) != 0 or (year % 400) == 0))

#5 - interval intersections
def interval_intersect(a, b, c, d):
    """Returns whether the intervals [a,b] and [c,d] intersect."""
    return (c <= b) and (a <= d)

#6 - name and age 
def name_and_age(name, age):
	"""Returns a string stating the person's age."""
	if age >= 0:
		return name + " is " + str(age) + " years old."
	else:
		return "Error: Invalid age"

#7 - print digits 
def print_digits(number):
	"""Prints the tens and ones digit of an integer in [0,100)."""
	
	if 0 <= number < 100:
		print "The tens digit is " + str(number // 10) + ",",
		print "and the ones digit is " + str(number % 10) + "."
	else:
		print "Error: Input is not a two-digit number."

#8 - Instructor name checks
# Name lookup formula
def name_lookup(first_name):
	"""Returns the instructor's last name."""
	
	if first_name == "Joe":
		return "Warren"
	elif first_name == "Scott":
		return "Rixner"
	elif first_name == "John":
		return "Greiner"
	elif first_name == "Stephen":
		return "Wong"
	else:
		return "Error: Not an instructor"
#Tests

def test(first_name):
	"""Tests the name_lookup function."""
	
	print name_lookup(first_name)
	
test("Joe")
test("Scott")
test("John")
test("Stephen")
test("Mary")



#9 - Pig Latin formula
def pig_latin(word):
    """Returns the (simplified) Pig Latin version of the word."""
    
    first_letter = word[0]
    
#10 - # Compute the smaller root of a quadratic equation.

###################################################
# Smaller quadratic root formula
def smaller_root(a, b, c):
    """
    Returns the smaller root of a quadratic equation with the
    given coefficients.
    """
        discriminant = b ** 2 - 4 * a * c
    if discriminant < 0 or a == 0:
        print "Error: No real solutions"
    else:
        discriminant_sqrt = discriminant ** 0.5
        # Choose the positive or negative square root that leads to a smaller root.
        if a > 0:
            smaller = - discriminant_sqrt
        else:
            smaller = discriminant_sqrt
        return (-b + smaller) / (2 * a)
# Tests
def test(a, b, c):
    """Tests the smaller_root function."""
    
    print "The smaller root of " + str(a) + "x^2 + " + str(b) + "x + " + str(c) + " is:" 
    print str(smaller_root(a, b, c))
test(1, 2, 3)
test(2, 0, -10)
test(6, -3, 5)

    rest_of_word = word[1 : ]
    
        if (first_letter == "a" or first_letter == "e" or first_letter == "i" or
        first_letter == "o" or first_letter == "u"):
        return word + "way"
    else:
        return rest_of_word + first_letter + "ay"

# Tests
def test(word):
    """Tests the pig_latin function."""
    
    print pig_latin(word)
    
test("pig")
test("owl")
test("python")

#igpay
#owlway
#ythonpay
