Definitions While many programming languages obscure the relationship between
programs and functions, BSL brings it to the fore. Every BSL program consists of
 several definitions, usually followed by an expression that involves those
 definitions. There are two kinds of definitions:

constant definitions, of the shape (define Variable Expression), which we
encountered in the preceding chapter; and

function definitions, which come in many flavors, one of which we used in the
Prologue.

Like expressions, function definitions in BSL come in a uniform shape:
(define (FunctionName Variable ... Variable)
  Expression)


Exercise 11:
Define a function that consumes two numbers, x and y, and that computes the
distance of point (x,y) to the origin.

(define (distance x y)
    (sqrt (+ (sqr x) (sqr y))))


Exercise 12. Define the function cvolume, which accepts the length of a side of
an equilateral cube and computes its volume. If you have time, consider
defining csurface, too.

(define (cvolume side)
    (* side (sqr side)))


Exercise 13. Define the function string-first, which extracts the first 1String
from a non-empty string.

(define (string-first str)
    (if (string? str)
    (substring str 0 1) "not a string"))


Exercise 14. Define the function string-last, which extracts the last 1String
from a non-empty string.

(define (string-last str)
    (if (string? str)
    (substring str (- (string-length str) 1) (string-length str)) "not a string"))


Exercise 15. Define ==>. The function consumes two Boolean values, call them
sunny and friday. Its answer is #true if sunny is false or friday is true.
Note Logicians call this Boolean operation implication, and they use the
notation sunny => friday for this purpose.

(define (==> sunny friday)
    (if (false? sunny) #true
        (if (false? friday) #false #true)))


Exercise 16. Define the function image-area, which counts the number of pixels
in a given image.

(define (image-area image-height image-width)
    (* image-height image-width))

(define (image-area image)
    (* (image-height image) (image-width image)))


Exercise 17. Define the function image-classify, which consumes an image and
conditionally produces "tall" if the image is taller than wide, "wide" if it
is wider than tall, or "square" if its width and height are the same.

(define (image-classify image)
    (if (= (image-height image ) (image-width image)) "square"
        (if (> (image-height image ) (image-width image)) "tall" "wide")))


Exercise 18. Define the function string-join, which consumes two strings and
appends them with "_" in between.

(define (string-join string1 string2)
    (string-append string1 "_" string2))


Exercise 19. Define the function string-insert, which consumes a string str
plus a number i and inserts "_" at the ith position of str. Assume i is a
number between 0 and the length of the given string (inclusive). See exercise
3 for ideas. Ponder how string-insert copes with "".

(define (string-insert str i)
    (string-append (substring str 0 i) "_" (substring str i (string-length str))))


Exercise 20. Define the function string-delete, which consumes a string plus a
number i and deletes the ith position from str. Assume i is a number between
0 (inclusive) and the length of the given string (exclusive).

(define (string-delete str i)
    (string-append (substring str 0 (- i 1)) (substring str (+ i 1) (string-length str))))


2.2 Computing



Exercise 21. Use DrRacket’s stepper to evaluate (ff (ff 1)) step-by-step.
Also try (+ (ff 1) (ff 1)). Does DrRacket’s stepper reuse the results of
computations?

No.



Exercise 22. Use DrRacket’s stepper on this program fragment:

(define (distance-to-origin x y)
  (sqrt (+ (sqr x) (sqr y))))
(distance-to-origin 3 4)

Does the explanation match your intuition?

Yes.


Exercise 23. The first 1String in "hello world" is "h". How does the following
function compute this result?

(define (string-first s)
  (substring s 0 1))

Use the stepper to confirm your ideas.

(define (string-first s)
  (substring s 0 1))
(string-first "hello world")

(string-first "hello world")    (substring "hello world" 0 1)
(substring "hello world" 0 1)   "h"


Exercise 24. Here is the definition of ==>: y
(define (==> x y)
  (or (not x) y))
Use the stepper to determine the value of (==> #true #false)

(define (==> x y)
  (or (not x) y))
(==> #true #false)

(==> #true #false)          (or (not #true) #false)
(or (not #true) #false)     (or #false #false)
(or #false #false)          #false


Exercise 25. Take a look at this attempt to solve exercise 17:
(define (image-classify img)
  (cond
    [(>= (image-height img) (image-width img)) "tall"]
    [(= (image-height img) (image-width img)) "square"]
    [(<= (image-height img) (image-width img)) "wide"]))
Does stepping through an application suggest a fix?

Only with a known square image.


Exercise 26. What do you expect as the value of this program:
(define (string-insert s i)
  (string-append (substring s 0 i)
                 "_"
                 (substring s i)))

(string-insert "helloworld" 6)
Confirm your expectation with DrRacket and its stepper.

"hellow_orld"

confirmed


2.3 Composing Functions

A program rarely consists of a single function definition. Typically, programs
consist of a main definition and several other functions and turns the result
of one function application into the input for another. In analogy to algebra,
we call this way of defining functions composition, and we call these
additional functions auxiliary functions or helper functions.
