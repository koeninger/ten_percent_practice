Note on Numbers The word “Number” refers to a wide variety of numbers, including
counting numbers, integers, rational numbers, real numbers, and even complex
numbers. For most uses, you can safely equate Number with the number line from
elementary school, though on occasion this translation is too imprecise. If we
wish to be precise, we use appropriate words: Integer, Rational, and so on. We
may even refine these notions using such standard terms as PositiveInteger,
NonnegativeNumber, NegativeNumber, and so on. End


Exercise 1:
(define x 3)
(define y 4)

Now imagine that x and y are the coordinates of a Cartesian point. Write down
an expression that computes the distance of this point to the origin, that is,
a point with the coordinates (0,0).

(sqrt (+ (sqr x) (sqr y)))


Exercise 2:
(define prefix "hello")
(define suffix "world")

Then use string primitives to create an expression that concatenates prefix and
suffix and adds "_" between them. When you run this program, you will see
"hello_world" in the interactions area.

>  (string-append prefix "_" suffix)
"hello_world"

Exercise 3:
(define str "helloworld")
(define i 5)

Then create an expression using string primitives that adds "_" at position i.
In general this means the resulting string is longer than the original one;
here the expected result is "hello_world".

(string-append (substring str 0 i) "_" (substring str i (string-length str)))

Exercise 4:
Use the same setup as in exercise 3 to create an expression that deletes the
ith position from str. Clearly this expression creates a shorter string than
the given one.

(string-append (substring str 0 (- i 1)) (substring str (+ i 1) (string-length str)))


Exercise 5. Use the 2htdp/image library to create the image of a simple boat
or tree. Make sure you can easily change the scale of the entire image.

(overlay/xy (circle 10 "solid" "green") 6 15
            (rectangle 8 40 "solid" "brown"))



Exercise 6: Create an expression that counts the number of pixels in the image
(define cat *image*)

(* (image-width cat) (image-height cat))


Exercise 7. Boolean expressions can express some everyday problems. Suppose you
want to decide whether today is an appropriate day to go to the mall. You go to
the mall either if it is not sunny or ifNadeem Hamid suggested this formulation
of the exercise. today is Friday (because that is when stores post new sales
items).

(define sunny #true)
(define friday #false)

Now create an expression that computes whether sunny is false or friday is true.
So in this particular case, the answer is #false. (Why?)

(or (and sunny #false) (and friday #true))


(if (= x 0) 0 (/ 1 x))

This if expression contains (= x 0), 0, and (/ 1 x), three so-called
sub-expressions. The evaluation of this expression proceeds in two steps:
The first expression is always evaluated. Its result must be a Boolean.

If the result of the first expression is #true, then the second expression
is evaluated; otherwise the third one is. Whatever their results are, they are
also the result of the entire if expression.

Exercise 8. Add the following line to the definitions area:
(define cat *image*)

Create a conditional expression that computes whether the image is tall or wide.
An image should be labeled "tall" if its height is larger than or equal to its
width; otherwise it is "wide".

(if (> (image-height cat ) (image-width cat)) "tall" "wide")

Now try the following modification. Create an expression that computes whether
a picture is "tall", "wide", or "square".

(if (= (image-height cat ) (image-width cat)) "square" (if (> (image-height cat ) (image-width cat)) "tall" "wide"))



One way to prevent such accidents is to use a predicate, which is a function
that consumes a value and determines whether or not it belongs to some class of
data. For example, the predicate number? determines whether the given value is
a number or not:

> (number? 4)
#true

> (number? pi)
#true

> (number? #true)
#false

> (number? "fortytwo")
#false



Exercise 9. Add the following line to the definitions area of DrRacket:
(define in ...)

Then create an expression that converts the value of in to a positive number.
For a String, it determines how long the String is; for an Image, it uses the
area; for a Number, it decrements the number by 1, unless it is already 0 or
negative; for #true it uses 10 and for #false 20.

(define in  ...)

(if (string? in)
    (string-length in)
    (if (image? in )
        (* (image-height in) (image-width in))
            (if (number? in)
                (if (> in 0)
                (- in 1)
                in)
            (if (= in true)
                10
                20))))

Exercise 10. Now relax, eat, sleep, and then tackle the next chapter
