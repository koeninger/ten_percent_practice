The first few chapters of this book show that learning to program requires
some mastery of many concepts. On the one hand, programming needs a language,
a notation for communicating what we wish to compute. The languages for
formulating programs are artificial constructions, though acquiring a
programming language shares some elements with acquiring a natural language.
Both come with vocabulary, grammar, and an understanding of what “phrases” mean.

Exercise 33. Research the “year 2000” problem.

Here we present a design recipe that integrates a step-by-step process with a
way of organizing programs around problem data. For the readers who don’t like
to stare at blank screens for a long time, this design recipe offers a way to
make progress in a systematic manner. For those of you who teach others to
design programs, the recipe is a device for diagnosing a novice’s difficulties.
For others, our recipe might be something that they can apply to other
areas—say, medicine, journalism, or engineering. For those who wish to become
real programmers, the design recipe also offers a way to understand and work
on existing programs—though not all programmers use a method like this design
recipe to come up with programs. The rest of this chapter is dedicated to the
first baby steps into the world of the design recipe; the following chapters
and parts refine and expand the recipe in one way or another.


3.1 Designing Functions

Since this knowledge is so important for everyone who reads the program,
we often write it down in the form of comments, which we call data definitions.
A data definition serves two purposes. First, it names a collection of
data—a class—using a meaningful word. Second,Computing scientists use
“class” to mean something like a “mathematical set.” it informs readers
how to create elements of this class and how to decide whether some arbitrary
piece of data belongs to the collection.

Here is a data definition for one of the above examples:
; A Temperature is a Number.
; interpretation represents Celsius degrees

The Design Process: Once you understand how to represent input information as
data and to interpret output data as information, the design of an individual
function proceeds according to a straightforward process:

Express how you wish to represent information as data. A one-line comment
suffices:
; We use numbers to represent centimeters.

Formulate data definitions, like the one for Temperature, for the classes of
data you consider critical for the success of your program.

Write down a signature, a statement of purpose, and a function header.

A function signature is a comment that tells the readers of your design how
many inputs your function consumes, from which classes they are drawn, and what
kind of data it produces. Here are three examples for functions that
respectively

consume one String and produce a Number:
; String -> Number

consume a Temperature and produce a String:
; Temperature -> String

consume a Number, a String, and an Image:
; Number String Image -> Image

Stop! What does this function produce?

An image?

A purpose statement is a BSL comment that summarizes the purpose of the
function in a single line. If you are ever in doubt about a purpose statement,
write down the shortest possible answer to the question
what does the function compute?

Every reader of your program should understand what your functions compute
without having to read the function itself.

Our parameter names reflect what kind of data the parameter represents.
Sometimes, you may wish to use names that suggest the purpose of the parameter.
When you formulate a purpose statement, it is often useful to employ the
parameter names to clarify what is computed. For example,
; Number String Image -> Image
; adds s to img,
; y pixels from the top and 10 from the left
(define (add-image y s img)
  (empty-scene 100 100))


Illustrate the signature and the purpose statement with some functional
examples. To construct a functional example, pick one piece of data from
each input class from the signature and determine what you expect back.

Suppose you are designing a function that computes the area of a square.
Clearly this function consumes the length of the square’s side, and that is
best represented with a (positive) number. Assuming you have done the first
process step according to the recipe, you add the examples between the
purpose statement and the header and get this:
; Number -> Number
; computes the area of a square with side len
; given: 2, expect: 4
; given: 7, expect: 49
(define (area-of-square len) 0)


; Number String Image -> Image
; adds s to img, y pixels from top, 10 pixels to the left
; given:
;    5 for y,
;    "hello" for s, and
;    (empty-scene 100 100) for img
; expected:
;    (place-image (text "hello" 10 "red") 10 5 ...)
;    where ... is (empty-scene 100 100)
(define (add-image y s img)
  (place-image (text s 10 "red") 10 y img))


3.2 Finger Exercises: Functions

Exercise 34. Design the function string-first, which extracts the first
character from a non-empty string. Don’t worry about empty strings.

; String -> !String
; Given a string extract first character
; Given: "h"            expected: "h"
; Given: "hello world"  expected: "h"
; (define (string-first str) "")

(define (string-first str)
  (substring str 0 1))

Exercise 35. Design the function string-last, which extracts the last
character from a non-empty string.

; String -> !String
; Given a string extract last character
; Given: "h"            expected: "h"
; Given: "hello world"  expected: "d"
;(define (string-last str) "")

(define (string-last str)
    (substring str (- (string-length str) 1)))

Exercise 36. Design the function image-area, which counts the number of
pixels in a given image.

; Image -> Number
; Given an image, return area in pixels
; (define (image-area img)

(define (image-area img)
  (* (image-height img) (image-width img)))

Exercise 37. Design the function string-rest, which produces a string like
the given one with the first character removed.

; String -> String
; Given a string, return the string minus the first character
; Given: "h",     expect: ""
; Given: "hello", expect "ello"
; (define (string-remain str) "")

(define (string-remain str)
  (substring str 1))

Exercise 38. Design the function string-remove-last, which produces a string
like the given one with the last character removed.

; String -> String
; Given a string remove last char
; Given "h",     expect: ""
; Given "hello", expect: "hell"

(define (string-remove-last str)
  (substring str 0 (- (string-length str) 1)))


3.3 Domain knowledge

It is natural to wonder what knowledge it takes to code up the body of a
function. A little bit of reflection tells you that this step demands an
appropriate grasp of the domain of the program. Indeed, there are two forms
of such domain knowledge:

Knowledge from external domains, such as mathematics, music, biology, civil
engineering, art, and so on. Because programmers cannot know all of the
application domains of computing, they must be prepared to understand the
language of a variety of application areas so that they can discuss problems
with domain experts. Mathematics is at the intersection of many, but not all,
domains. Hence, programmers must often pick up new languages as they work
through problems with domain experts.

Knowledge about the library functions in the chosen programming language.
When your task is to translate a mathematical formula involving the tangent
function, you need to know or guess that your chosen language comes with a
function such as BSL’s tan. When your task involves graphics, you will benefit
from understanding the possibilities of the 2htdp/image library.


3.4 From Functions to Programs

Multi-function programs come about because interactive programs automatically
need functions that handle key and mouse events, functions that render the
state as music, and possibly more. Even batch programs may require several
different functions because they perform several separate tasks. Sometimes the
problem statement itself suggests these tasks; other times you will discover
the need for auxiliary functions as you are in the middle of designing some
function.


3.5 On Testing

Hence, it is critical to mechanize tests instead of performing them manually.
Like many programming languages, BSL includes a testing facility, and DrRacket
is aware of this facility. To introduce this testing facility, we take a
second look at the function that converts temperatures in Fahrenheit to Celsius
temperatures from Programs. Here is the definition:

; Number -> Number
; converts Fahrenheit temperatures to Celsius
; given 32, expect 0
; given 212, expect 100
; given -40, expect -40
(define (f2c f)
  (* 5/9 (- f 32)))

Testing the function’s examples calls for three computations and three
comparisons between two numbers each. You can formulate these tests and add
them to the definitions area in DrRacket:

(check-expect (f2c -40) -40)
(check-expect (f2c 32) 0)
(check-expect (f2c 212) 100)

Because it is so useful to have DrRacket conduct the tests and not to check
everything yourself manually, we immediately switch to this style of testing
for the rest of the book. This form of testing is dubbed unit testing, and
BSL’s unit-testing framework is especially tuned for novice programmers. One
day you will switch to some other programming language; one of your first
tasks will be to figure out its unit-testing framework.


3.6 Designing World Programs


(define WIDTH-OF-WORLD 400)
(define HEIGHT-OF-WORLD 40)

(define WHEEL-RADIUS 5)
(define WHEEL-DISTANCE (* WHEEL-RADIUS 5))

(define WHEEL
  (circle WHEEL-RADIUS "solid" "black"))
(define SPACE (rectangle WHEEL-DISTANCE WHEEL-RADIUS
                         "solid" "white"))
(define BOTH-WHEELS (beside WHEEL SPACE WHEEL))

(define BODY-LENGTH (+ WHEEL-DISTANCE (* 4 WHEEL-RADIUS)))
(define BODY-HEIGHT (* WHEEL-RADIUS 2))

(define BODY
  (above
    (rectangle (/ BODY-LENGTH 2) (/ BODY-HEIGHT 2)
               "solid" "red")
    (rectangle BODY-LENGTH BODY-HEIGHT "solid" "red")))

;; a car!
(define CAR (overlay/align/offset
             "middle" "bottom"
             BOTH-WHEELS
             0 (- 0 WHEEL-RADIUS)
             BODY))

(define Y-CAR (- HEIGHT-OF-WORLD (/ (image-height CAR) 2)))

(define TREE
  (underlay/xy (circle 10 "solid" "green")
               9 15
               (rectangle 2 20 "solid" "brown")))

(define BACKGROUND (place-image
                    TREE
                    200 (- HEIGHT-OF-WORLD (/ (image-height TREE) 2))
                    (empty-scene WIDTH-OF-WORLD HEIGHT-OF-WORLD)))

; WorldState -> Image
; places the image of the car x pixels from
; the left margin of the BACKGROUND image
(define (render ws)
  (place-image CAR ws Y-CAR BACKGROUND))

; WorldState -> WorldState
; adds 3 to x to move the car right
(define (tock ws)
  (+ ws 3))


; WorldState -> WorldState
; launches the program from some initial state
(define (main ws)
   (big-bang ws
     [on-tick tock]
     [to-draw render]))
