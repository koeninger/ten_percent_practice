A good programcomes with a short write-up that explains what it does, what inputs it expects, and what it produces 

programming product: the program's connection to the problem statement is evident so that a small change to the problem statement is easy to
translate into a small change to the program 

Exercise 33: research the "year 2000" problem
Y2K problem, Millennium bug, Y2K bug
was a class of computer bugs related to the formatting and storage of calendar data for dates beginning the year 2000
problems arose or were anticipated because many programs repsresent 4-digit years with only the final 2 digits making the 
2000 year indistinguishable from 1900 

3.1 Designing Functions

the purpose of a program is to describe a computational process that consumes some information and produces new information
think of information as facts about the program's domain 
for a program to process information it must turn the information into some form of data in the programming language, then
process the data, and then turn the resulting data into information again 
an interactive program may even intermingle these steps by acquiring more information from the world as needed and delivering 
information in between 

model view controller (MVC) the way BSL and DrRacket separate data processing from parsing information into data and turning 
data into information 

program design must start with the connection between information and data and we should decide how to use our chosen programming
language to represent the relevant pieces of information as data and how we should interpret data as information 

Designing a program that consumes and produces information inf the form of numbers, an interpreetation requires explaining what
a number as 42 denotes in the domain: 
42 could refer to # of pixels from top margin in the domain of images
42 could mean a temperature
etc. 
the key is to know how to go from numbers as information to numbers as data and vice versa

data definitions: write down this knowledge in the form of comments and serves 2 purposes:
names a collection of data, a class, using a meaningful word
informs readres how to crete elements of this class and how to decide whether some arbitrary piece of data belongs to the collection
Example:
; A Temperature is a Number.
; interpretation represents Celsius degrees 

The Design Process: 
1. Express how you wish to represent the information as data
; We use numbers to represent centimeters.
formulate data definitions, like the one for Temperature, for the classes of data that are considered critical for the program

2. write down a signature, statement of purpose, and a function header
function signature: a comment that tells the readers of the design how many inputs the function consumers, which classes they
draw from, and what kind of data it produces
Example: 
; String -> Number
; Temperature -> String
; Number String Image -> Image 
purpose statement: a comment that summarizes the puprose of the function in a single line
write down the shortes possible answer to the question. What does the function compute?
good programmers write 2 purpose statements: 1 for the reaer who may have to modiy the code and 
1 for the person who wishes to use the program but not read it 
header: a simplistic function definition also called stub
(define (f a-string) 0)
(define (g n) "a")
(define (h numb str img) (empty-scene 100 100)) 
Example: 
; Number String Image -> Image
; adds s to img,
; y pixels from the top and 10 from the left
(define (add-image y s img)
  (empty-scene 100 100)) 
  
3. illustrate the signature and the purpose statement with some functional examples
functional example: pick 1 piece of data from each input class from the signature and determine what you expect back
add the examples between the purpose statement and the header 
Example: 
; Number -> Number
; computes the area of a square with side len
; given: 2, expect: 4
; given: 7, expect: 49
(define (area-of-square len) 0)

4. take inventory, to understand what are the givens and what we need to compute, we replace the function's body with a template
right now the template contains just the parameters
(define (area-of-square len)
  (... len ...)) 

5. time to code/program, to write executable expressions and function definitions; replace the body of the function with an expression that
attempts to compute from the pieces in the template what the purpose statement promises
Example 
; Number -> Number
; computes the area of a square with side len
; given: 2, expect: 4
; given: 7, expect: 49
(define (area-of-square len)
  (sqr len))
Example: 
; Number String Image -> Image
; adds s to img, y pixels from top, 10 pixels to the left
; given
;   5 for y,
;   "hello" for s, and
;   (empty-scene 100 100) for img
; expected: 
;   (place-image (text "hello" 10 "red") 10 5 ...)
;   where ... is (empty-scene 100 100)
(define (add-image y s img)
  (place-image (text s 10 "red") 10 y img)) 
  
6. test the function on the examples that you worked out before
> (area-of-square 2)
4
> (area-of-quare 2)
> 49
The results must match the output you expect, if it doesn't match consider the following:
- you miscalculated and determined the wrong expected output for some of the examples
- the function definition computes the wrong result (this is a logical error in the program, known as a bug)
- both the examples and the function definition are wrong

Exercise 34 Design the function string-first which extracts the first character from a non-empty string. Don't worry about empty strings
; String -> String
; extracts the first character from a non-empty string
; given: "hello", expect: "h"
; given: "h", expect: "h"
; (define (string-first str) ... str ... ...)) 
(define 
    (string-first str)
    (substring str 0 1))
    
>(string-first "hello")
"h"
>(string-first "h")
"h"

Exercise 35 Design the function string-last, which extracts the last character from a non-empty string
; String -> String
; extracts the last character from a non-empty string
; given: "hello", expect: "o"
; given: "o", expect: "o"
; (define (string-last str) (... str (- (... str) ...)))
(define
  (string-last str)
  (string-ith str (- (string-length str) 1)))

> (string-last "hello")
"o"
> (string-last "o")
"o"

Exercise 36 Design the function image-area, which counts the number of pixels in a given image
; Image -> Number
; counts the number of pixels in a given image
; given: (square 10 "solid" "blue"), expect: 100
; given: (triangle 3 "solid" "blue"), expect: 9
; (define (image-area img) (* (... img) (... img)))
(define 
  (image-area img)
  (* (image-width img) (image-height img)))

> (image-area (square 10 "solid" "blue"))
100
> (image-area (square 3 "solid" "blue"))
9

Exercise 37 Design the function string-rest, which produces a string like the given one with the first character removed
; String -> String
; produces a string likes the given string with the first character removed
; given: "hello", expect" "ello"
; given: "h", expect ""
; (define (string-rest str) (... str ...))
(define 
  (string-rest str) 
  (substring str 1)) 

> (string-rest "hello")
"ello"
> (string-rest "h")
""

Exercise 38 Design the function string-remove-last, which produces a string like the given one with the last character removed
; String -> String
; produces a string like the given string with the last character removed
; given: "hello", expect "hell"
; given: "h", expect: ""
; (define (string-remove-last str) (... str ... (- (... str) 1))) 
(define (string-remove-last str)
  (substring str 0 (- (string-length str) 1)))
  
> (string-remove-last "hello")
"hell"
> (string-remove-last "h")
""

3.3 Domain Knowledge
knowledge from external domains (math, mustic, bio, etc.)
knowledge about the library functions in the chosen programming language (2htd/image in BSL)

3.4 From Functions to Programs
to remind yourself of the existance of defined global constants, you may wish to add the constants to templates 
wish list a list of needed functions, each entry should consist of:
  a menaingful name for the function
  a signature
  a purpose statement
for the design of a batch program, put the main function on the wish list and start designing it 
for the design of an interactive program, put the event handlers, the stop-when function and scene-rendering function on the list
pick a wish and design the function

3.5 On Testing
; Number -> Number
; converts Fahrenheit temperatures to Celsius
; given 32, expect 0
; given 212, expect 100
; given -40, expect -40
(define (f2c f)
  (* 5/9 (- f 32))) 

testing calls for three computatins and three comparisons, you can formulate these and add them to the definitions
(check-expect (f2c -40) -40)
(check-expect (f2c 32) 0)
(check-expect (f2c 212) 100)

click RUN, Dr. Rocket says all passed or will show which and why one failed
; Number -> Number
; converts Fahrenheit temperatures to Celsius temperatures 
 
check-expects can be added before or after the function definition 
; Number -> Number
; converts Fahrenheit temperatures to Celsius temperatures 
 
(check-expect (f2c -40) -40)
(check-expect (f2c 32) 0)
(check-expect (f2c 212) 100)
 
(define (f2c f)
  (* 5/9 (- f 32)))
  
check-expect also works for images 
this form of testing is dubbed unit testing 

3.6 Designing World Problems 

Sample Problem Design a program that moves a car from left to right on the world canvas, three pixels per clock tick.
1. for all properties of the world that remain the same over time and are needed to render it as an image, introduce constnats
via definitions
  two kinds of constants
    a. "physical" describe general attributes of objects in the world such as speed, color, height, etc.
 for the sample: the radius of the wheels and distance between the wheels are physical constnats
      (define WIDTH-OF-WORLD 200)
      (define WHEEL-RADIUS 5)
      (define WHEEL-DISTANCE (* WHEEL-RADIUS 5)) 
    b. graphical constants are images of objects in the world, the program composes them into images that represent the compete state of the world
      for the sample: wheel images of car are the graphical constants
          (define WHEEL
            (circle WHEEL-RADIUS "solid" "black"))
          (define SPACE 
            (rectangle ... WHEEL-RADIUS ... "white"))
          (define BOTH-WHEELS
            (beside WHEEL SPACE WHEEL))
       graphical constatns are usually computed and tend to involve physical constants and other images
2. the properties that change over time give rise to the current state of the world (clock ticks, keystrokes, or mouse actions)
  the task is to develop a data representation for all possible states of the world, resulting in data definition and a comment that tells how to represent world information as data and how to interpret data as information about the world
  for the example: car's distance from the left margin that changes over time
    ; A WorldState is a Number.
    ; interpretation the number of pixels between
    ; the left border of the scene and the car
  also the count of number of clock ticks that have passed and to use this number as the state of the world 
    ; A WorldState is a WorldState
    ; state-of-the-world the number of clock ticks that have passsed 
 3. Need to design a number of functions os that you can form a valid big-bang expression
  need a function that maps any given state into an image so that big-bang cna redner the sequence of states as images
    ; render
  need to decide which kinds of events hsould change which aspects of the world state
    ; clock-tick-handler
    ; keystroke-handler
    ; mouse-event-handler
  the problem statement suggest that the progrm should stop if it has certain properties
    ; end? 
  example:
    ; WorldState -> Image
    ; places the image of the car x pixels from 
    ; the left margin of the BACKGROUND image 
    (define (render x)
      BACKGROUND)
      
    ; WorldState -> WorldState
    ; adds 3 to x to move the car right
    (define (tock x)
      x)
 4. need a main function, doesn't demand design or test, and exists to launch the program 
 sample:
 ; WorldState -> WorldState 
 ; luanches the program from some initial state
 (define (main ws)
  (big-bang ws
    [on-tick tock]
    [to-draw render]))
    
Exercise 39 (define WHEEL-RADIUS 5)
 single point of control: ensures that the image can be enlarged or reduced via single change to a constant definition 
 a good design employs this idea as much as possible
 Develop image of car so that WHEEL-RADIUS remains the single point of control 
 
; Physical Constants
(define WIDTH-OF-WORLD 400)
(define HEIGHT-OF-WORLD 50)

; Graphical Constants
(define WHEEL-RADIUS 5)
(define WHEEL-DISTANCE
  (* WHEEL-RADIUS 5))

(define WHEEL
  (circle WHEEL-RADIUS "solid" "black"))
(define SPACE
  (rectangle WHEEL-RADIUS WHEEL-RADIUS "solid" "white"))
(define BOTH-WHEELS
  (beside WHEEL SPACE WHEEL))

(define BODY-LENGTH
  (+ WHEEL-RADIUS WHEEL-DISTANCE))
(define BODY-HEIGHT
  (+ WHEEL-RADIUS WHEEL-RADIUS))
(define BODY
  (above
    (rectangle (/ BODY-LENGTH 2) (/ BODY-HEIGHT 2) "solid" "red")
    (rectangle BODY-LENGTH BODY-HEIGHT "solid" "red")))

(define CAR
  (overlay/align/offset "middle" "bottom" BOTH-WHEELS 0 (- 0 WHEEL-RADIUS) BODY))

(define Y-CAR
  (- HEIGHT-OF-WORLD
    (/ (image-height CAR) 2)))

(define BACKGROUND
  (empty-scene WIDTH-OF-WORLD HEIGHT-OF-WORLD))
    
;;;;; next entry on the wish list is the clock tick handling function:

; WorldState is a Number
; interpretation the number of pixels between the left border and the car 

;; Functions

;WorldState -> WorldState
; moves the car by 3 pixels for every clock tick
(define (tock ws) ws) 
(check-expect (tock 20) 23)
(check-expect (tock 78) 81)

(define (tock ws)
  (+ ws 3)) 
  
Example 40 formulate the examples as BSL test using the check-expect form 
introduce a mistake, re-run the tests. 

second entry on wish list specifies a function that translates the state of the world into an image
; WorldState -> Image
; places the care into the BACKGROUND scene,
; according to the given world state
(define (render ws) 
  BACKGROUND) 
  
examples:
ws         an expression
50         (place-image CAR 50 Y-CAR BACKGROUND)
100        (place-image CAR 100 Y-CAR BACKGROUND)
150        (place-image CAR 150 Y-CAR BACKGROUND)
200        (place-image CAR 200 Y-CAR BACKGROUND)

; WorldState -> Image
; places the car into the BACKGROUND scene,
; according to the given world state 
;(check-expect (render 50) (place-image CAR 50 Y-CAR BACKGROUND)
;(check-expect (render 100) (place-image CAR 100 Y-CAR BACKGROUND)
;(check-expect (render 150) (place-image CAR 150 Y-CAR BACKGROUND)
;(check-expect (render 200) (place-image CAR 200 Y-CAR BACKGROUND)
(define (render ws) 
  (place-image CAR ws Y-CAR BACKGROUND))

Exercise 41 Add Tree to scenery

Add function for tree to Graphical Constants
(define TREE
  (underlay/xy (circle 10 "solid" "green")
    9 15
    (rectangle 2 20 "solid" "brown")))

Change BACKGROUND to include tree 

(define BACKGROUND
  (place-image
   TREE
   (/ WIDTH-OF-WORLD 2) (- HEIGHT-OF-WORLD (/ (image-height TREE) 2))
    (empty-scene WIDTH-OF-WORLD HEIGHT-OF-WORLD)))
    
 Add a clause to the big-bang expression that stops the animation when the car has disappeared on the right side 
 
 ;; WorldState-Boolean
 ;; end car simulaton when car reaches end of world 
 (check-expect (end? 0) #false)
 (check-expect (end? 100) #false)
 (check-expect (end? (+ WIDTH-OF-WORLD (/ (image-width CAR) 2))) #true)
 
 (define (end? ws)
  (>= ws 
    (+


