Exercise 102 Design all other functions that are needed to complete the game for this second data definition 

; physical constants
(define WIDTH 200)
(define HEIGHT 200)
(define UFO-SPEED 7)
(define JUMP 5)
(define MISSILE-SPEED 10)

; graphical constants
(define UFO (overlay
             (rectangle 20 2 "solid" "purple")
             (ellipse 15 10 "solid" "purple")))
(define UFO-HEIGHT (image-height UFO))
(define UFO-WIDTH (image-width UFO))


(define TANK (rectangle 15 10 "solid" "olive"))
(define TANK-HEIGHT (image-height TANK))
(define TANK-Y (- HEIGHT (/ TANK-HEIGHT 2)))

(define MISSILE (rectangle 1 15 "solid" "red"))
(define MISSILE-WIDTH (image-width MISSILE))
(define MISSILE-HEIGHT (image-height MISSILE))

(define BACKGROUND (empty-scene WIDTH HEIGHT "black"))

(define LOSER (overlay (text "GAME OVER" 20 "red") BACKGROUND))
(define WINNER (overlay (text "YOU WIN" 20 "green") BACKGROUND))

; A UFO is a Posn
; interpretation (make-posn x y) is the UFO's location
; using the top-down, left-to-right convention
(define UFO1 (make-posn 20 10))
(define UFO2 (make-posn 20 100))

(define-struct tank [loc vel])
; A Tank is a structure:
; (make-tank Number Number)
; interpretation (make-tank x dx) specifies the position
; (x, HEIGHT) and the tank's speed: dx pixels/tick
(define TANK1 (make-tank 28 3))
(define TANK2 (make-tank 100 -3))


(define-struct sigs [ufo tank missile])
; A Sigs.v2 (short for SIGS version 2) is a structure:
; (make-sigs UFO TANK MissileOrNot)
; interpretation represents the complete state of a
; space invader game


; A MissileOrNot is one of:
; - #false
; - Posn
; interpretation #false means the missile is in the tank;
; Posn says the missile is at that location
(define MISSILE1 #false)
(define MISSILE2 (make-posn 30 (- HEIGHT TANK-HEIGHT 10)))

(define SIGS1 (make-sigs UFO1 TANK1 MISSILE1))
(define SIGS2 (make-sigs UFO2 TANK2 MISSILE2))

; SIGS.v2 -> Image
; renders the given game state on top of BACKGROUND
(check-expect (si-render.v2 SIGS1) (tank-render TANK1
                                                (ufo-render UFO1
                                                            (missile-render.v2 MISSILE1 BACKGROUND))))
(check-expect (si-render.v2 SIGS2) (tank-render TANK2 (ufo-render UFO2 (missile-render.v2 MISSILE2 BACKGROUND))))
(define (si-render.v2 s)
  (tank-render
   (sigs-tank s)
   (ufo-render (sigs-ufo s)
               (missile-render.v2 (sigs-missile s)
                                  BACKGROUND))))
; Tank Image -> Image
; adds t to the given image im
(check-expect (tank-render TANK1 BACKGROUND) (place-image TANK 28 TANK-Y BACKGROUND))
(check-expect (tank-render TANK2 BACKGROUND) (place-image TANK 100 TANK-Y BACKGROUND))
(define (tank-render t im)
  (place-image TANK (tank-loc t) TANK-Y im))

; UFO Image -> Image
; adds u to the given image im
(check-expect (ufo-render UFO1 BACKGROUND) (place-image UFO 20 10 BACKGROUND))
(check-expect (ufo-render UFO2 BACKGROUND) (place-image UFO 20 100 BACKGROUND))
(define (ufo-render u im)
  (place-image UFO (posn-x u) (posn-y u) im))

; MissileOrNot Image -> Image
; adds an image of missile m to scene s
(check-expect (missile-render.v2 MISSILE1 BACKGROUND) BACKGROUND)
(check-expect (missile-render.v2 MISSILE2 BACKGROUND) (place-image MISSILE 30 (- HEIGHT TANK-HEIGHT 10) BACKGROUND))
; (define (missile-render.v2 m s) s) ;stub
(define (missile-render.v2 m im)
  (cond
    [(boolean? m) im]
    [(posn? m) (place-image MISSILE (posn-x m) (posn-y m) im)]))

; SIGS -> Boolean
; stops the game when one of two conditions
; - the UFO lands
; - the MISSILE hits the UFO
(check-expect (si-game-over? (make-sigs UFO1 TANK1 (make-posn 20 10))) #true)
(check-expect (si-game-over? (make-sigs (make-posn 20 10) TANK1 MISSILE2)) #false)
(define (si-game-over? s)
  (cond
    [(ufo-landed? (sigs-ufo s)) #true]
    [(ufo-hit? (sigs-ufo s) (sigs-missile s)) #true]
    [else #false]))

; UFO -> Boolean
; #true if UFO has landed
; lose game
(check-expect (ufo-landed? UFO1) #false)
(check-expect (ufo-landed? (make-posn 20 200)) #true)
(define (ufo-landed? u)
  (>= (posn-y u) (- HEIGHT (/ UFO-HEIGHT 2))))

; UFO MISSILE -> Boolean
; #true if the UFO has been hit by the MISSILE
; win game
(check-expect (ufo-hit? (make-posn 20 10) (make-posn 20 10)) #true)
(check-expect (ufo-hit? (make-posn 20 10) MISSILE2) #false)
(define (ufo-hit? u m)
  (and
   (<= (abs (- (posn-x u) (posn-x m)))
       (+ (/ UFO-WIDTH 2) (/ MISSILE-WIDTH 2)))
   (<= (abs (- (posn-y u) (posn-y m)))
       (+ (/ UFO-WIDTH 2) (/ MISSILE-WIDTH 2)))))

; SIGS -> Image
; renders the final state of the game
(check-expect (si-render-final (make-sigs UFO1 TANK1 (make-posn 20 10))) WINNER)
(check-expect (si-render-final (make-sigs (make-posn 20 200) TANK1 MISSILE2)) LOSER)

(define (si-render-final s)
  (cond
    [(ufo-landed? (sigs-ufo s)) LOSER]
    [(ufo-hit? (sigs-ufo s) (sigs-ufo s)) WINNER]))

; SIGS -> SIGS
; determines which position the objects move for every clock tick
; si-move adds a random element for the UFO move to si-move-proper

(define (si-move s)
  (si-move-proper s (random 1)))

; SIGS Number -> SIGS
; moves the objects of space-invader predictably by delta
; 0 - subtract 1 from UFO-SPEED
; 1 - moves -1 from x direction
; 2 - move 1 in x direction
(check-expect (si-move-proper SIGS2 2) (make-sigs (update-ufo (sigs-ufo SIGS2) 2) (update-tank (sigs-tank SIGS2)) (update-missile (sigs-missile SIGS2))))
(check-expect (si-move-proper SIGS2 1) (make-sigs (update-ufo (sigs-ufo SIGS2) 1) (update-tank (sigs-tank SIGS2)) (update-missile (sigs-missile SIGS2))))

(define (si-move-proper s n)
  (make-sigs
   (update-ufo (sigs-ufo s) n)
   (update-tank (sigs-tank s))
   (update-missile (sigs-missile s))))

; UFO Number -> UFO
; update a UFO with a random adjustment on tock
; 0 - subtract JUMP from UFO-SPEED
; 1 - move - JUMP in x direction
; 2 - move + JUMP in x direction
(check-expect (update-ufo UFO1 0) (make-posn 20 (+ 10 (- UFO-SPEED JUMP))))
(check-expect (update-ufo UFO1 1) (make-posn (- 20 JUMP) (+ 10 UFO-SPEED)))
(check-expect (update-ufo UFO1 2) (make-posn (+ 20 JUMP) (+ 10 UFO-SPEED)))

(define (update-ufo u n)
  (cond
    [(= n 0) (make-posn (posn-x u) (+ (posn-y u) (- UFO-SPEED JUMP)))]
    [(= n 1) (make-posn (- (posn-x u) JUMP) (+ (posn-y u) UFO-SPEED))]
    [(= n 2) (make-posn (+ (posn-x u) JUMP) (+ (posn-y u) UFO-SPEED))]))

; Tank -> Tank
; update tank x position with tank velocity on tock
(check-expect (update-tank TANK1) (make-tank (+ 28 3) 3))
(check-expect (update-tank TANK2) (make-tank (+ 100 -3) -3))
(define (update-tank t)
  (make-tank (+ (tank-loc t) (tank-vel t)) (tank-vel t)))

; Missile -> Missile
; update MISSILE y position on tock
(check-expect (update-missile MISSILE2) (make-posn 30 (- (- HEIGHT TANK-HEIGHT 10) MISSILE-SPEED)))
(define (update-missile m)
  (make-posn (posn-x m) (- (posn-y m) MISSILE-SPEED)))

; Number -> Number
; creates a random number in the internal [0,n)
; possibily a different one each time it is called
; (define (random-number n) (random 1))

; SIGS KeyEvent -> SIGS
; reacts to three different keys
; moves tank via left and right arrow
; moves missile with space bar
(check-expect (si-control SIGS1 "left") (make-sigs UFO1 (tank-left TANK1) MISSILE1))
(check-expect (si-control SIGS1 "right") SIGS1)
(check-expect (si-control SIGS1 " ") (make-sigs UFO1 TANK1 (make-posn (+ (tank-loc TANK1)
                                                                       (tank-vel TANK1))
                                                                    (- HEIGHT (/ TANK-HEIGHT 2)))))

(define (si-control s ke)
  (cond
    [(key=? ke "left") (turn-left s)]
    [(key=? ke "right") (turn-right s)]
    [(key=? ke " ") (fire-missile s)]
    [else s]))

; SIGS -> SIGS
; pressing the left arrow moves tank left
(check-expect (turn-left SIGS1) (make-sigs UFO1 (tank-left TANK1) MISSILE1))
(check-expect (turn-left SIGS2) SIGS2)
(define (turn-left s)
  (make-sigs (sigs-ufo s) (tank-left (sigs-tank s)) (sigs-missile s)))

; Tank -> Tank
; turns tank left
(check-expect (tank-left TANK1) (make-tank 28 (- 0 3)))
(check-expect (tank-left TANK2) TANK2)
(define (tank-left t)
  (cond
    [(<= 0 (tank-vel t)) (make-tank (tank-loc t) (- 0 (tank-vel t)))]
    [else t]))

; SIGS -> SIGS
; pressing the right arrow moves tank right
(check-expect (turn-right SIGS1) SIGS1)
(check-expect (turn-right SIGS2) (make-sigs UFO2 (tank-right TANK2) MISSILE2))
(define (turn-right s)
  (make-sigs (sigs-ufo s) (tank-right (sigs-tank s)) (sigs-missile s)))

; Tank -> Tank
; turns tank right
(check-expect (tank-right TANK1) TANK1)
(check-expect (tank-right TANK2) (make-tank 100 (- 0 -3)))
(define (tank-right t)
  (cond
    [(< (tank-vel t) 0) (make-tank (tank-loc t) (- 0 (tank-vel t)))]
    [else t]))

; SIGS -> SIGS
; fires missile when pressing space bar
; if MissileOrNot #false then converts to a MISSILE
(check-expect (fire-missile SIGS1) (make-sigs UFO1 TANK1 (make-posn (+ (tank-loc TANK1)
                                                                       (tank-vel TANK1))
                                                                    (- HEIGHT (/ TANK-HEIGHT 2)))))
(check-expect (fire-missile SIGS2) (make-sigs UFO2 TANK2 (make-posn (+ 30 MISSILE-SPEED) (- HEIGHT TANK-HEIGHT 10))))

(define (fire-missile s)
  (cond
    [(boolean? (sigs-missile s)) (make-sigs (sigs-ufo s) (sigs-tank s) (make-posn
                                                                        (+ (tank-loc (sigs-tank s))
                                                                           (tank-vel (sigs-tank s)))
                                                                        (- HEIGHT (/ TANK-HEIGHT 2))))]
    [(posn? (sigs-missile s)) (make-sigs (sigs-ufo s) (sigs-tank s) (make-posn
                                                                     (+ (posn-x (sigs-missile s)) MISSILE-SPEED)
                                                                     (posn-y (sigs-missile s))))]))

; SIGS -> SIGS
; start the world
(define (main2 s)
  (big-bang s
            [on-tick si-move .3]
            [to-draw si-render.v2]
            [on-key si-control]
            [stop-when si-game-over? si-render-final]))
