It is the purpose of a data definition to describe parts of this universe and to name these parts
so that we can refer to them concisely, a named data definition is a description of a 
collection of data, and that name is usable in other data definitions and 
in function signatures 
In a function signature, the name specifies what data a function will deal with and,
implicitly, which parts of the universe of data it won't deal with

Example: 

; A BS is one of: ;; a mixe of English and BSL, precise and unambigous 
; - "hello",
; - "world", or
; - pi. 

; the definition of structure types revises this to expand all possible structure
; instances 
(make-posn "hello" 0)
(make-posn "world" 1)
(make-posn "good" 2)
(make-posn "bye" 3)
(make-posn (make-posn 0 1) 2)
(make-posn 0 3) 
(make-posn 1 3) 
(make-posn 2 3) 
(make-posn 3 3) 

;; adding another structure type definition mixes and matches everything again
; add the definition for ball, also with two fields 
(define-stuct ball [location velocity]) 
(make-ball -1 0)
(make-ball -1 1) 
(make-ball -1 2)
(make-ball -1 3)
(make-ball "bye" #t) 

;; a data definition for structure types describes large collections
;; of data via combination of existing data definitions with instances
; Posn is (make-posn Number Number) 

; possible to construct an instance of posn that doesn't satisfy the requirement that both 
; fields contain numbers
(make-posn (make-pson 1 1) "hello")
; this structure contains a posn in the x field and a sring in the y field

Exercise 76 formulate data definitions for the following strucutre type definitions: 

(define-struct movie [title producer year])
; Movie is (make-movie String String Number)
; interpretation title is the name of the movie
; producer is the name of the movie producer
; year is the year the movie was released 

(define MOVIE1 (make-movie "The Predator" "John Davis" 2018))

(define-struct person [name hair eyes phone])
; Person is (make-person String String String String)
; interpretation name is name of person
; hair is the hair color
; eyes is the eye color
; phone is the person's phone number

(define PERSON1 (make-person "Angelica" "brown" "brown" "512-555-5555"))

(define-struct pet [name number])
; Pet is (make-pet String String)
; interpretation name is the pet's name
; number is pet owner's phone number

(define PET1 (make-pet "Mo" "512-555-5555")

(define-struct CD [artist title price])
; CD is (make-CD String String Number)
; interpretation artist the artist name
; title is name of CD
; price is cost of CD

(define CD1 (make-CD "Artist Name" "Lame Title" 10))
                    
(define-struct sweater [material size producer])
; Sweater is (make-sweater String Number String)
; interpretation material is what sweater is made of 
; size is the size of sweater
; producer is company that makes sweater

(define SWEATER1 (make-sweater "cotton" 8 "Sweater Company"))

Exercise 77 Provide a structure type definition and a data definition for representing points in time since midnight.
A point in time consists of three numbers: hours, minutes, and seconds 

(define-struct point-time [hours minutes seconds])
; point-time is (make-pt-time Number Number Number)
; interpretation a point in time containing an hour, minute and seconds 

(define TIME1 (make-pt-time 3 30 30))

Exercise 78 Provide a structure type and a data definition for representing three-letter words. A word consists of lowercase
letters, represented with the 1Strings "a" through "z" plus #false. Note this is part of exercise 396 

; A Lower Case Letter (or LCL) is one of:
; 1String [a,z]
; #false
; interpretation lower case letters, a through z, or no letter 

(define-struct 3L-WORD [letter1 letter2 letter3]
; 3L-WORD is a (make-3L-WORD LCL LCL LCL) 
; interpretation 3L-WORD consists of three lower case letters 

