Exercise 88 Define a strucutre type that keeps track of the cat's x-coordinate and its happiness. 
Then formulate a data definition for cats, dubbed VCat, including an interpretation 

(define-struct vcat [x-pos happy])
; A cat-status is a structure
;      (make-vcat Number Number)
; interpretation (make-vcat n k) describes a cat's
; x-coordinate and its happiness level

(define CAT1 (make-vcat 0 100) ; happy cat at origin
(define CAT2 (make-vcat 100 0) ; unhappy cat at x-coordinate 100
(define CAT3 (make-vcat 50 50)

Exercise 89 Design the happy-cat world program, which manages a walking cat and its happiness level. 
Let's assume that the cat starts out with perfect happiness
Hint1 Reuse the functions from the world programs in Virtual Pet Worlds
Hint2 Use structure type from the preceding exercise to represent the state of the world 

(define-struct vcat [x-pos happy])
; A cat-status is a structure
; (make-vcat Number Number)
; interpretation (make-vcat n k) describes a cat's
; x-coordinate and its happiness level

(define CAT1 (make-vcat 0 100))
  
(define CAT2 (make-vcat 100 0))
  
(define CAT3 (make-vcat 50 50))

; physical constants
(define WIDTH-OF-WORLD 400)
(define HEIGHT-OF-WORLD 200)
(define MAXIMUM-HAPPINESS-SCORE 100)
(define MINIMUM-HAPPINESS-SCORE 0)
(define TOCK-DECREASE -0.1)
(define DOWN-CHANGE 1/5)
(define UP-CHANGE 1/3)
(define GAUGE-WIDTH 100)
(define GAUGE-HEIGHT 25)

; graphical constants
(define CAT .)
  
(define Y-CAT
  (- HEIGHT-OF-WORLD (/ (image-height CAT) 2)))
  
(define BACKGROUND
  (empty-scene WIDTH-OF-WORLD HEIGHT-OF-WORLD))

(define GAUGE
  (overlay/xy
   (rectangle GAUGE-WIDTH GAUGE-HEIGHT "solid" "black")
   0 0
   (empty-scene GAUGE-WIDTH GAUGE-HEIGHT)))

; VCAT -> Image
; places the cat in the world, using vcat-x-pos as the x position
; renders the happiness guage using the value of vcat-happy

(define (render vcat)
  (place-image/align
   (rectangle (* 3 (vcat-happy vcat)) GAUGE-HEIGHT "solid" "black")
   5 10 "left" "top"
   (place-image CAT (vcat-x-pos vcat) Y-CAT BACKGROUND)))

; VCAT KeyEvent -> VCat
; handle CAT feeding and petting
; up arrow pets CAT, down arrow feeds CAT

(define (change-cat vcat ke)
  (cond
    [(key=? ke "up") (pet vcat)]
    [(key=? ke "down") (feed vcat)]
    [else vcat]))

; Auxiliary functions for change-cat
; VCAT -> VCAT
; pet the cat

(define (pet vcat)
  (make-vcat (vcat-x-pos vcat) (* (vcat-happy vcat) UP-CHANGE)))

; VCAT -> VCAT
; feed the cat 

(define (feed vcat)
  (make-vcat (vcat-x-pos vcat) (* (vcat-happy vcat) DOWN-CHANGE)))

; WorldState -> WorldState
; moves the CAT by 3 pixel for every clock tick
; moves CAT by endless left to right loop

(define (tock vcat)
  (make-vcat
   (+ (vcat-x-pos vcat) 1)
   (cond
     [(< (vcat-happy vcat) 1) 0]
     [else (min (- (vcat-happy vcat) TOCK-DECREASE) HEIGHT-OF-WORLD)])))

; WorldState -> WorldState
; launch the program from some initial state
; run (main CAT1)

(define (main vcat)
  (big-bang vcat
    (on-tick tock)
    (to-draw render)))
