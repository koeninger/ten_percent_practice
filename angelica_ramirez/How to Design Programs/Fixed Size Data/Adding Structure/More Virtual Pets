Exercise 88 Define a strucutre type that keeps track of the cat's x-coordinate and its happiness. 
Then formulate a data definition for cats, dubbed VCat, including an interpretation 

(define-struct vcat [x-pos happy])
; A cat-status is a structure
;      (make-vcat Number Number)
; interpretation (make-vcat n k) describes a cat's
; x-coordinate and its happiness level

(define CAT1 (make-vcat 0 100) ; happy cat at origin
(define CAT2 (make-vcat 100 0) ; unhappy cat at x-coordinate 100
(define CAT3 (make-vcat 50 50)

;; Exercise 89 Design the happy-cat world program, which manages a walking cat and its happiness level. 
;; Let's assume that the cat starts out with perfect happiness
;; Hint1 Reuse the functions from the world programs in Virtual Pet Worlds
;; Hint2 Use structure type from the preceding exercise to represent the state of the world 
(define-struct vcat [x-pos happy])
; A cat-status is a structure
; (make-vcat Number Number)
; interpretation (make-vcat n k) describes a cat's
; x-coordinate and its happiness level

(define CAT1 (make-vcat 0 100))
  
(define CAT2 (make-vcat 100 0))
  
(define CAT3 (make-vcat 50 50))

; physical constants
(define WIDTH-OF-WORLD 400)
(define HEIGHT-OF-WORLD 200)
(define MAXIMUM-HAPPINESS-SCORE 100)
(define MINIMUM-HAPPINESS-SCORE 0)
(define TOCK-DECREASE -0.1)
(define DOWN-CHANGE 1/5)
(define UP-CHANGE 1/3)
(define GAUGE-WIDTH 100)
(define GAUGE-HEIGHT 25)
(define SPEED 3)

; graphical constants
(define CAT .)
  
(define Y-CAT
  (- HEIGHT-OF-WORLD (/ (image-height CAT) 2)))
  
(define BACKGROUND
  (empty-scene WIDTH-OF-WORLD HEIGHT-OF-WORLD))

(define GAUGE
  (overlay/xy
   (rectangle GAUGE-WIDTH GAUGE-HEIGHT "solid" "black")
   0 0
   (empty-scene GAUGE-WIDTH GAUGE-HEIGHT)))

; VCAT -> Image
; places the cat in the world, using vcat-x-pos as the x position
; renders the happiness guage using the value of vcat-happy
(check-expect (render CAT1) (place-image/align
                              (rectangle (* 3 100) GAUGE-HEIGHT "solid" "black")
                                         5 10 "left" "top"
                                         (place-image CAT 0 Y-CAT BACKGROUND)))
(check-expect (render CAT2) (place-image/align
                              (rectangle (* 3 0) GAUGE-HEIGHT "solid" "black")
                                         5 10 "left" "top"
                                         (place-image CAT 100 Y-CAT BACKGROUND)))

(define (render vcat)
  (place-image/align
   (rectangle (* 3 (vcat-happy vcat)) GAUGE-HEIGHT "solid" "black")
   5 10 "left" "top"
   (place-image CAT (vcat-x-pos vcat) Y-CAT BACKGROUND)))

; VCAT KeyEvent -> VCat
; handle CAT feeding and petting
; up arrow pets CAT, down arrow feeds CAT
(check-expect (change-cat CAT3 "up") (pet CAT3))
(check-expect (change-cat CAT2 "a") CAT2)

(define (change-cat vcat ke)
  (cond
    [(key=? ke "up") (pet vcat)]
    [(key=? ke "down") (feed vcat)]
    [else vcat]))

; Auxiliary functions for change-cat
; VCAT -> VCAT
; pet the cat
(check-expect (pet CAT1) (make-vcat 0 (+ 100 UP-CHANGE)))
(check-expect (pet CAT3) (make-vcat 50 (+ 50 UP-CHANGE)))

(define (pet vcat)
  (make-vcat (vcat-x-pos vcat) (+ (vcat-happy vcat) UP-CHANGE)))

; VCAT -> VCAT
; feed the cat 
(check-expect (feed CAT2) (make-vcat 100 (+ 0 DOWN-CHANGE)))
(check-expect (feed CAT3) (make-vcat 50 (+ 50 DOWN-CHANGE)))

(define (feed vcat)
  (make-vcat (vcat-x-pos vcat) (+ (vcat-happy vcat) DOWN-CHANGE)))

; WorldState -> WorldState
; moves the CAT by 3 pixel for every clock tick
; moves CAT by endless left to right loop
(check-expect (tock CAT3) (make-vcat (+ 50 SPEED) (- 50 0.1)))
(check-expect (tock CAT2) (make-vcat (+ 100 SPEED) 0.0))

(define (tock vcat)
  (make-vcat
   (tock-x-pos (vcat-x-pos vcat))
   (tock-happy (vcat-happy vcat))))

;Auxiliary functions for tock

; Number -> Number
; update the x-pos, reset at edge of screen
(check-expect (tock-x-pos 50) (+ 50 SPEED))
(check-expect (tock-x-pos 100) (+ 100 SPEED))

(define (tock-x-pos xpos)
  (cond
    [(< xpos WIDTH-OF-WORLD) (+ xpos SPEED)]
    [else 0]))

; Number -> Number
; update the given happiness scale
(check-expect (tock-happy 50) (- 50 0.1))
(check-expect (tock-happy 0) 0.0)

(define (tock-happy happy)
  (cond
    [(> happy 0.0) (- happy 0.1)]
    [else 0.0]))

; WorldState -> WorldState
; launch the program from some initial state
; run (main CAT1)

(define (happy-cat vcat)
  (big-bang vcat
    (on-tick tock)
    (to-draw render)
    (on-key change-cat))) 

(happy-cat CAT1)


Exercise 90 Modify the happy-cat program from the preceding exercises so that it stops whenever the cat's 
happiness falls to 0

(define-struct vcat [x-pos happy])
; A cat-status is a structure
; (make-vcat Number Number)
; interpretation (make-vcat n k) describes a cat's
; x-coordinate and its happiness level

(define CAT1 (make-vcat 0 100))
  
(define CAT2 (make-vcat 100 0))
  
(define CAT3 (make-vcat 50 50))

; physical constants
(define WIDTH-OF-WORLD 400)
(define HEIGHT-OF-WORLD 200)
(define MAXIMUM-HAPPINESS-SCORE 100)
(define MINIMUM-HAPPINESS-SCORE 0)
(define TOCK-DECREASE -0.1)
(define DOWN-CHANGE 1/5)
(define UP-CHANGE 1/3)
(define GAUGE-WIDTH 100)
(define GAUGE-HEIGHT 25)
(define SPEED 3)

; graphical constants
(define CAT .)
  
(define Y-CAT
  (- HEIGHT-OF-WORLD (/ (image-height CAT) 2)))
  
(define BACKGROUND
  (empty-scene WIDTH-OF-WORLD HEIGHT-OF-WORLD))

(define GAUGE
  (overlay/xy
   (rectangle GAUGE-WIDTH GAUGE-HEIGHT "solid" "black")
   0 0
   (empty-scene GAUGE-WIDTH GAUGE-HEIGHT)))

; VCAT -> Image
; places the cat in the world, using vcat-x-pos as the x position
; renders the happiness guage using the value of vcat-happy
(check-expect (render CAT1) (place-image/align
                              (rectangle (* 3 100) GAUGE-HEIGHT "solid" "black")
                                         5 10 "left" "top"
                                         (place-image CAT 0 Y-CAT BACKGROUND)))
(check-expect (render CAT2) (place-image/align
                              (rectangle (* 3 0) GAUGE-HEIGHT "solid" "black")
                                         5 10 "left" "top"
                                         (place-image CAT 100 Y-CAT BACKGROUND)))

(define (render vcat)
  (place-image/align
   (rectangle (* 3 (vcat-happy vcat)) GAUGE-HEIGHT "solid" "black")
   5 10 "left" "top"
   (place-image CAT (vcat-x-pos vcat) Y-CAT BACKGROUND)))

; VCAT KeyEvent -> VCat
; handle CAT feeding and petting
; up arrow pets CAT, down arrow feeds CAT
(check-expect (change-cat CAT3 "up") (pet CAT3))
(check-expect (change-cat CAT2 "a") CAT2)

(define (change-cat vcat ke)
  (cond
    [(key=? ke "up") (pet vcat)]
    [(key=? ke "down") (feed vcat)]
    [else vcat]))

; Auxiliary functions for change-cat
; VCAT -> VCAT
; pet the cat
(check-expect (pet CAT1) (make-vcat 0 (+ 100 UP-CHANGE)))
(check-expect (pet CAT3) (make-vcat 50 (+ 50 UP-CHANGE)))

(define (pet vcat)
  (make-vcat (vcat-x-pos vcat) (+ (vcat-happy vcat) UP-CHANGE)))

; VCAT -> VCAT
; feed the cat 
(check-expect (feed CAT2) (make-vcat 100 (+ 0 DOWN-CHANGE)))
(check-expect (feed CAT3) (make-vcat 50 (+ 50 DOWN-CHANGE)))

(define (feed vcat)
  (make-vcat (vcat-x-pos vcat) (+ (vcat-happy vcat) DOWN-CHANGE)))

; WorldState -> WorldState
; moves the CAT by 3 pixel for every clock tick
; moves CAT by endless left to right loop
(check-expect (tock CAT3) (make-vcat (+ 50 SPEED) (- 50 0.1)))
(check-expect (tock CAT2) (make-vcat (+ 100 SPEED) 0.0))

(define (tock vcat)
  (make-vcat
   (tock-x-pos (vcat-x-pos vcat))
   (tock-happy (vcat-happy vcat))))

;Auxiliary functions for tock

; Number -> Number
; update the x-pos, reset at edge of screen
(check-expect (tock-x-pos 50) (+ 50 SPEED))
(check-expect (tock-x-pos 100) (+ 100 SPEED))

(define (tock-x-pos xpos)
  (cond
    [(< xpos WIDTH-OF-WORLD) (+ xpos SPEED)]
    [else 0]))

; Number -> Number
; update the given happiness scale
(check-expect (tock-happy 50) (- 50 0.1))
(check-expect (tock-happy 0) 0.0)

(define (tock-happy happy)
  (cond
    [(> happy 0.0) (- happy 0.1)]
    [else 0.0]))

; VCat -> Boolean
; stops when cat's happiness falls to 0
(check-expect (unhappy? CAT3) #false)
(check-expect (unhappy? CAT2) #true)

(define (unhappy? vcat)
  (<= (vcat-happy vcat) MINIMUM-HAPPINESS-SCORE))

; WorldState -> WorldState
; launch the program from some initial state
; run (main CAT1)

(define (happy-cat vcat)
  (big-bang vcat
    (on-tick tock)
    (to-draw render)
    (on-key change-cat)
    (stop-when unhappy?))) 

(happy-cat CAT1)

Exercise 91 Extend structure type definition and data definition from exercise 88 to include a direction field. 
Adjust happy-cat program so that cat moves in the specified direction. 
The program should move the cat in the current direction and it should turn the cat around when it reaches
either end of the scene 

(define-struct vcat [x-pos happy direction])
; A cat-status is a structure
; (make-vcat Number Number Boolean)
; interpretation (make-vcat x h d) describes a cat's
; x-coordinate and its happiness level and the direction that cat is moving
; if direction is #true, cat travels right
; if direction is #false, cat travels left

(define CAT1 (make-vcat 0 100 #true))
  
(define CAT2 (make-vcat 100 0 #false))
  
(define CAT3 (make-vcat 50 50 #true))

; physical constants
(define WIDTH-OF-WORLD 400)
(define HEIGHT-OF-WORLD 200)
(define MAXIMUM-HAPPINESS-SCORE 100)
(define MINIMUM-HAPPINESS-SCORE 0)
(define TOCK-DECREASE -0.1)
(define DOWN-CHANGE 1/5)
(define UP-CHANGE 1/3)
(define GAUGE-WIDTH 100)
(define GAUGE-HEIGHT 25)
(define SPEED 3)

; graphical constants
(define CAT .)
  
(define Y-CAT
  (- HEIGHT-OF-WORLD (/ (image-height CAT) 2)))
  
(define BACKGROUND
  (empty-scene WIDTH-OF-WORLD HEIGHT-OF-WORLD))

(define GAUGE
  (overlay/xy
   (rectangle GAUGE-WIDTH GAUGE-HEIGHT "solid" "black")
   0 0
   (empty-scene GAUGE-WIDTH GAUGE-HEIGHT)))

; VCAT -> Image
; places the cat in the world, using vcat-x-pos as the x position
; renders the happiness guage using the value of vcat-happy
(check-expect (render CAT1) (place-image/align
                              (rectangle (* 3 100) GAUGE-HEIGHT "solid" "black")
                                         5 10 "left" "top"
                                         (place-image CAT 0 Y-CAT BACKGROUND)))
(check-expect (render CAT2) (place-image/align
                              (rectangle (* 3 0) GAUGE-HEIGHT "solid" "black")
                                         5 10 "left" "top"
                                         (place-image CAT 100 Y-CAT BACKGROUND)))

(define (render vcat)
  (place-image/align
   (rectangle (* 3 (vcat-happy vcat)) GAUGE-HEIGHT "solid" "black")
   5 10 "left" "top"
   (place-image CAT (vcat-x-pos vcat) Y-CAT BACKGROUND)))

; VCAT KeyEvent -> VCat
; handle CAT feeding and petting
; up arrow pets CAT, down arrow feeds CAT
(check-expect (change-cat CAT3 "up") (pet CAT3))
(check-expect (change-cat CAT2 "a") CAT2)

(define (change-cat vcat ke)
  (cond
    [(key=? ke "up") (pet vcat)]
    [(key=? ke "down") (feed vcat)]
    [else vcat]))

; Auxiliary functions for change-cat
; VCAT -> VCAT
; pet the cat
(check-expect (pet CAT1) (make-vcat 0 (+ 100 UP-CHANGE) #true))
(check-expect (pet CAT3) (make-vcat 50 (+ 50 UP-CHANGE) #true))

(define (pet vcat)
  (make-vcat
   (vcat-x-pos vcat)
   (+ (vcat-happy vcat) UP-CHANGE)
   (vcat-direction vcat)))

; VCAT -> VCAT
; feed the cat 
(check-expect (feed CAT2) (make-vcat 100 (+ 0 DOWN-CHANGE) #false))
(check-expect (feed CAT3) (make-vcat 50 (+ 50 DOWN-CHANGE) #true))

(define (feed vcat)
  (make-vcat
   (vcat-x-pos vcat)
   (+ (vcat-happy vcat) DOWN-CHANGE)
   (vcat-direction vcat)))

; WorldState -> WorldState
; moves the CAT by 3 pixel for every clock tick
; moves CAT by endless left to right loop
(check-expect (tock CAT3) (make-vcat (+ 50 SPEED) (- 50 0.1) #true))
(check-expect (tock CAT2) (make-vcat (- 100 SPEED) 0.0 #false))

(define (tock vcat)
  (tock-happy (tock-x-pos (tock-direction vcat))))

;Auxiliary functions for tock

; Number -> Number
; update the x-pos, reset at edge of screen
(check-expect (tock-x-pos CAT2) (make-vcat (- 100 SPEED) 0 #false))
(check-expect (tock-x-pos CAT3) (make-vcat (+ 50 SPEED) 50 #true))

(define (tock-x-pos vcat)
  (make-vcat
   (update-x vcat)
   (vcat-happy vcat)
   (vcat-direction vcat)))

; Number -> Number
; update the given happiness scale
(check-expect (tock-happy CAT2) (make-vcat 100 0.0 #false))
(check-expect (tock-happy CAT3) (make-vcat 50 (- 50 0.1) #true))

(define (tock-happy vcat)
  (cond
    [(<= (vcat-happy vcat) 0.0)
     (make-vcat (vcat-x-pos vcat) 0.0 (vcat-direction vcat))]
    [(> (vcat-happy vcat) 100)
     (make-vcat (vcat-x-pos vcat) 100 (vcat-direction vcat))]
    [else (make-vcat
           (vcat-x-pos vcat)
           (- (vcat-happy vcat) 0.1)
           (vcat-direction vcat))]))

; Vcat -> Vcat
; update cat's direction on tock
(check-expect (tock-direction CAT2) (make-vcat 100 0 #false))
(check-expect (tock-direction CAT3) (make-vcat 50 50 #true))

(define (tock-direction vcat)
  (cond
    [(and (vcat-direction vcat) (>= (vcat-x-pos vcat) WIDTH-OF-WORLD))
     (make-vcat (vcat-x-pos vcat)
                (vcat-happy vcat)
                #false)]
    [(and (not (vcat-direction vcat)) (<= (vcat-x-pos vcat) 0))
     (make-vcat
      (vcat-x-pos vcat)
      (vcat-happy vcat)
      #true)]
    [else vcat]))

; Vcat-> Number
; update positions based on direction
(check-expect (update-x CAT2) (- 100 SPEED))
(check-expect (update-x CAT3) (+ 50 SPEED))

(define (update-x vcat)
  (cond [(vcat-direction vcat)
         (+ (vcat-x-pos vcat) SPEED)]
        (else
         (- (vcat-x-pos vcat) SPEED))))

; VCat -> Boolean
; stops when cat's happiness falls to 0
(check-expect (unhappy? CAT3) #false)
(check-expect (unhappy? CAT2) #true)

(define (unhappy? vcat)
  (<= (vcat-happy vcat) MINIMUM-HAPPINESS-SCORE))

; WorldState -> WorldState
; launch the program from some initial state
; run (main CAT1)

(define (happy-cat vcat)
  (big-bang vcat
    (on-tick tock)
    (to-draw render)
    (on-key change-cat)
    (stop-when unhappy?))) 

(happy-cat CAT1)

Exercise 92 Design the champ program, which has the chameleon continuously walking across the canvas from left to right. 
When it reaches the right end of the canvas, it disappears and immediately reappears on the left. Like the cat, the 
chameleon gets hungry from all the walking, and, as time passes by, this hunger expresses itself as unahappiness.
May reuse happiness gauge from virtual cat. To make chameleon happy, feed it (down arrow, 2 points) petting isn't allowed.
Can change color "r" turns it red, "b" blue, and "g" green. 
Add chameleon world program to the virtual cat game and reuse functions from the latter when possible. 
Start with the data definition VCham, for reprsenting chameleons. 
When a partly transparent image is combined with a colored shape, the image takes on the underlying color. In the chameleon drawing, 
it is actually the inside of the animal that is transparent, the area outside is solid white. Try out the following expression:
(define background
  (rectangle (image-width cham)
             (image-height cham)
             "solid"
             "red"))
 
(overlay cham background)


(define cham .) 
