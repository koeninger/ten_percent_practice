Exercise 72 Formulate a data definition for the above phone stucture type definition 
that accommodates the given examples. Formulate a data definition for phone numbers 
using this structure type definition: (define-struct phone# [area switch num])

(define-struct phone [area number])
; A phone is a structure: 
; (make-phone Number String)
; interpretation (make-phone area number)
; area the area code
; number the phone-number

(make-phone 512 "555-5555") 

(define-struct phone# [area switch num])
; A phone# is a structure:
; (make-phone# Number Number Number)
; interpretation (make-phone# area switch num)
; area the area code 
; switch is the phone switch (exchange) of neighborhood
; number is a Number in the neighborhood

(make-phone# 512 363 2421) 

Exercise 73 team is designing an interactive game program that moves a red dot 
across a 100 x 100 canvas and allows players to use the mouse to reset the dot 

(define MTS (empty-scene 100 100))
(define DOT (circle 3 "solid" "red")) 

; A Posn represents the state of the world 

; Posn -> Posn
(define (main p0)
  (big-bang p0
    [on-tick x+]
    [on-mouse reset-dot]
    [to-draw scene+dot]))
    
; Posn -> Image
; adds a red spot to MTS at p
(check-expect (scene+dot (make-posn 10 20))
              (place-image DOT 10 20 MTS)) 
(check-expect (scene+dot (make-posn 88 73))
              (place-image DOT 88 73 MTS)) 
              
(define (scene+dot p) 
  (place-image DOT (posn-x p) (posn-y p) MTS))
  
; Posn -> Posn
; increases the x-coordinate of p by 3
(check-expect (x+ (make-posn 10 0)) (make-posn 13 0))

;updater or functional setter for posn-up-x ;; useful when writing large programs 
; consumes a Posn p and a Number n
; produces a Posn like p with n in the x field 

(define (posn-up-x p n)
  (make-posn n (posn-y p)))
  
(define (x+ p)
  (posn-up-x p (+ (posn-x p) 3))) 

; Posn Number Number MouseEvt -> Posn
; for mouse clicks, (make-posn x y); otherwise p
(check-expect
 (reset-dot (make-posn 10 20) 29 31 "button-down")
 (make-posn 29 31))
(check-expect
 (reset-dot (make-posn 10 20) 29 31 "button-up")
 (make-posn 10 20))

(define (reset-dot p x y me)
  (cond
    [(mouse=? "button-down" me) (make-posn x y)]
    [else p])) 

Exercise 74 Add tests for Exercise 73 and make sure they pass, run the program and use the mouse to place the red dot. 
; All 5 tests passed 

Exercise 75

(define-struct vel [deltax deltay])
; A Vel is a structure:
; (make-vel Number Number)
; interpretation (make-vel dx dy) means a velocity of 
; dx pixels (per tick) along the horizontal 
; dy pixels (per tick) along the vertical direction 

(define-struct ufo [loc vel])
; A UFO is a structure: 
; (make-ufo Posn Vel)
; interpretation (make-ufo p v) is a location
; p moving at velocity v

(define v1 (make-vel 8 -3)) ;; the order of these definitions matter 
(define v2 (make-vel -5 -3)) 
(define p1 (make-posn 22 80))
(define p2 (make-posn 30 77)) 
(define u1 (make-ufo p1 v1))
(define u2 (make-ufo p1 v2))
(define u3 (make-ufo p2 v1))
(define u4 (make-ufo p2 v2)) 

; UFO -> UFO
; determines where u moves in one clock tick;
; leaves the velocity as is 
(check-expect (ufo-move-1 u1) u3)
(check-expect (ufo-move-1 u2) 
              (make-ufo (make-posn 17 77)) v2) 

; template1
; (define (ufo-move-1 u)
;         (... (ufo-loc u) ... (ufo-vel u) ...)) 
; template2 
; (define (ufo-move-1 u)
;         (... (posn-x (ufo-loc u)) ...
;         ... (posn-y (ufo-loc u)) ... 
;         ... (vel-deltax (ufo-vel u)) ...
;         ... (vel-deltay (ufo-vel u)) ...))  ;; If a function deals with nested structures, develop one function per level of nesting

(define (ufo-move-1 u)
  (make-ufo (posn+ (ufo-loc u) (ufo-vel u))
            (ufo-vel u)))

; Posn Vel -> Posn 
; adds v to p
(check-expect (posn+ p1 v1) p2)
(check-expect (posn+ p1 v2) (make-posn 17 77)) 

; template
; (define (posn+ p v)
;    (... (posn-x ) ... (posn-y p) ...
;     ... (vel-deltax v) ... (vel-deltay v) ...))

(define (posn+ p v)
  (make-posn (+ (posn-x p) (vel-deltax v))
             (+ (posn-y p) (vel-deltay v))))
