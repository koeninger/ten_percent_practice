constant definitions (define Variable Expression) 
function definitions (define FunctionName Variable ... Variable) Expression)
  (define (
  the name of the function
  followed by several variables, separated by space and ending in )
  and an expression followed by (
function application puts defined functions to work and looks just like the applications of a pre-defined operation
  write (
  write down the name of a defined function f,
  write down as many arguments as f consumes, separated by space, 
  and add ) at the end

Exercise 11 Define a function that consumers two numbers x and y, and that compuates the distance of point (x, y) to the origin
(define x 3)
(define y 4)
(define 
  (distance x y) 
  (sqrt (+ (sqr x) (sqr y))))

Exercise 12 Define the function cvolume which accepts the lenght of a side of an equilateral cube and compuetes its volume
(define 
  (cvolume x) 
  (* x x x))
if you have time consider defining csurface
(define 
  (csurface x) 
  (* 6 (sqr x)))

Exercise 13 Define the function string-first, which extracts the first 1string from a non-empty string
(define 
  (string-first str) 
  (substring str 0 1))

Exerces 14 Define the function string-last, which extracts the last 1string from a non-empty string
(define 
  (string-last str) 
  (string-ith str (- (string-length str) 1)))

Exercise 15 Define ==>. The function consumes two Boolean values, calls them sunny and friday. Its answer is #true if sunny is false
or friday is true. Note logicians call this Boolean operation implication and they use the notation sunny => friday for thsi purpose
(define sunny #true)
(define friday #false)
(define (==> sunny friday) 
  (or (not sunny) (not friday)))

Exercise 16 Define the function image-area which counts the number of pixels in a given image 
(define 
  (image-area img) 
  (* (image-width img) (image-height img)))
  
Exercise 17 Define the funciton image-classify which consumes an image and conditionally produces "tall" if the image is taller 
than wide, "wide" if it is wide and tall, or "sqare" if its width and height are the same 
(define (image-classify img) 
  (if (= (image-width img) (image-height img)) "square" (if (> (image-height img) (image-width img)) "tall" "wide")))
  
Exercise 18 Define the function string-join which consumes two strings and appends them with "_" in between
(define (string-join str1 str2) 
  (string-append str1 "_" str2))
  
Exercise 19 Define the funciton string-insert, which consumes a string str plus a number i and insterts "_" at the ith position of str. 
Assume i is a number between 0 and the length of the given string (inclusive) Ponder how string-insert copes with " "
(define (string-insert str i) 
  (string-append (substring str 0 i) "_" (substring str i)))
> (string-insert " " 1)
" _"
  
Exercise 20 Define the function string-delete which consumes a string plus a number i and deltes the ith position from str. 
Assume i is a number between 0 (inclusive) and the length of the given string (exclusive) Can string-delete deal with empty strings? 
(define (string-delete str i) 
  (string-append 
    (substring str 0 i) 
    (substring str (+ i 1))))
> (string-delete "" 0)
substring: starting index is out of range
  starting index: 1
  valid range: [0, 0]
  string: ""
  
Exercise 21 Use DrRacket’s stepper to evaluate (ff (ff 1)) step by step.
Also try (+ (ff 1) (ff 1)).
Does DrRacket’s stepper reuse the results of computations?

(ff (ff 1))
(ff (* 10 1))
(ff 10)
(* 10 10)
100

(+ (ff 1) (ff 1))
(+ (* 10 1) (ff 1))
(+ 10 (* 10 1))
(+ 10 10)
20

Exercise 22 run in stepper
(define (distance-to-origin x y)
  (sqrt (+ (sqr x) (sqr y))))

(distance-to-origin 3 4)
(sqrt (+ (sqr 3) (sqr 4)))
(sqrt (+ 9 (sqr 4)))
(sqrt (+ 9 16))
(sqrt 25)
5

Exercise 23 run in stepper 
(define (string-first s)
  (substring s 0 1))

(string-first "hello world")
(substring "hello world" 0 1)
"h"

Exercise 24 run in stepper 
(define (==> x y)
  (or (not x) y))

(==> #true #false)
(or (not #true) #false)
(or #false #false)
#false

Exercise 25 Does the stepping suggest how to fix this attempt? 
(define (image-classify img)
  (cond
    [(>= (image-height img) (image-width img))
     "tall"]
    [(= (image-height img) (image-width img))
     "square"]
    [(<= (image-height img) (image-width img))
     "wide"]))

(image-classify (circle 3 "solid" "red"))

;; Yes the "=" clause should come first.

(define (image-classify-fixed img)
  (cond
    [(= (image-height img) (image-width img))
     "square"]
    [(>= (image-height img) (image-width img))
     "tall"]
    [(<= (image-height img) (image-width img))
     "wide"]))
 
Exercise 26 Confirm with stepper
(define (string-insert s i)
  (string-append (substring s 0 i)
                 "_"
                 (substring s i)))

(string-insert "helloworld" 6)
"hellow_orld"

Composing Functions: 
programs consist of a main definition and several other functions and turns the result of one function application into the input for another
call this way of defining functions composition and additional functions auxiliary functions or helper functions 

Figure 12 Batch program for fillin in letter templates
(define (letter fst lst signature-name)
  (string-append
    (opening fst)
    "\n\n"
    (body fst lst)
    "\n\n"
    (closing signature-name)))
 
(define (opening fst)
  (string-append "Dear " fst ","))
 
(define (body fst lst)
  (string-append
   "We have discovered that all people with the" "\n"
   "last name " lst " have won our lottery. So, " "\n"
   fst ", " "hurry and pick up your prize."))
 
(define (closing signature-name)
  (string-append
   "Sincerely,"
   "\n\n"
   signature-name
   "\n"))
   
  First function: main function which produces a complete letter from the first and last name of the addressee plus a signature
  the main function refers to 3 auxilliary functions to produce: opening, body, and signature and composes the results in the correct order with string-append
> (letter "Matthew" "Fisler" "Felleisen")
"Dear Matthew,\n\nWe have discovered that ...\n"

> (letter "Kathi" "Felleisen" "Findler")
"Dear Kathi,\n\nWe have discovered that ...\n"
the "/n" represents a new line when the string is printed 
Now add (require 2htdp/batch-io) 
> (write-file 'stdout (letter "Matt" "Fiss" "Fell"))
Dear Matt,

 

We have discovered that all people with the

last name Fiss have won our lottery. So, 

Matt, hurry and pick up your prize.

 

Sincerely, 


Fell

'stdout (think of this as a String for now) 

Define one function per task and a main function that puts it all together

Sample Problem The owner of a monopolistic movie theater in a small town has complete freedom in setting ticket prices. The more he charges, the fewer people can afford tickets. The less he charges, the more it costs to run a show because attendance goes up. In a recent experiment the owner determined a relationship between the price of a ticket and average attendance.
At a price of $5.00 per ticket, 120 people attend a performance. For each 10-cent change in the ticket price, the average attendance changes by 15 people. That is, if the owner charges $5.10, some 105 people attend on the average; if the price goes down to $4.90, average attendance increases to 135. Let’s translate this idea into a mathematical formula:
[average attendance = 120 people - ((change in price/$0.10) * 15) 
1. (define (attendees ticket-price)
      (- 120 (* (- ticket-price 5.0) (/ 15 0.1))))
2. revenue is exclusively generated by the sale of tickets 
   (define (revenue ticket-price)
      (* ticket-price (attendees ticket-price))) 
3. cost consists of 2 parts: a fixed part $180 and variable that depends on the number of attendees
   (define (cost ticket-price)
      (+ 180 (* 0.04 (attendees ticket-price)))) 
4. profit is difference between revenue and costs 
   (define (profit ticket-price)
      (- (revenue ticket-price) (cost ticket-price))) 
      
Exercise 27. Our solution to the sample problem contains several constants in the middle of functions. 
Collect all definitions in DrRacket’s definitions area and change them so that all magic numbers are refactored into constant definitions
(define base-attendees 120)
(define base-price 5.0)
(define change-in-attendees 15)
(define change-in-price 0.1) 
(define fixed-cost-per-performance 180)
(define variable-cost-per-attendee 0.04)


(define (attendees ticket-price)
      (- base-attendees (* (- ticket-price base-price) (/ change-in-attendees change-in-price))))
 
  (define (revenue ticket-price)
      (* ticket-price (attendees ticket-price))) 

  
   (define (cost ticket-price)
      (+ fixed-cost-per-performance (* variable-cost-per-attendee (attendees ticket-price)))) 

   
   (define (profit ticket-price)
      (- (revenue ticket-price) (cost ticket-price)))

Exercise 28 Determine the potential profit for these ticket prices: $1, 2, 3, 4, 5. 
> (profit 1)
511.2
> (profit 2)
937.2
> (profit 3)
1063.2
> (profit 4)
889.2
> (profit 5)
415.2
Which price maximizes the profit of the movie theater? 
$3 
Determine the best ticket price to a dime. 
$2.90 

Exercise 29 There is no longer a fixed cost, a variable cost of $1.50 per attendee remains. Modify both programs to reflect this change. 
(define base-attendees 120)
(define base-price 5.0)
(define change-in-attendees 15)
(define change-in-price 0.1) 
(define variable-cost-per-attendee 1.5)


(define (attendees ticket-price)
      (- base-attendees (* (- ticket-price base-price) (/ change-in-attendees change-in-price))))
 
  (define (revenue ticket-price)
      (* ticket-price (attendees ticket-price))) 
  
   (define (cost ticket-price)
     (* variable-cost-per-attendee (attendees ticket-price)))
   
   (define (profit ticket-price)
      (- (revenue ticket-price) (cost ticket-price)))

(define (profit price)
  (- (* (+ 120
           (* (/ 15 0.1)
              (- 5.0 price)))
        price)
     (* 1.5
           (+ 120
              (* (/ 15 0.1)
                 (- 5.0 price))))))
When programs are modified, test them again with ticket prices $3, 4, and 5. and compare results. 
> (profit 3)
630
> (profit 4)
675
> (profit 5)
420

2.4 Global Constants
Definition has following shape:
write "(define", 
write down the name,
followed by a space and an expression, and 
write down ")"

global variable: name of constant
constant definition: the definition
right-hand side of the definition: the expression in a constnat definition 

constant definitions intodruce names for all forms of data: numbers, images, strings, and so on.
; the current prie of a movie ticket:
(define CURRENT-PRICE 5)
; a blank line:
(define NL "\n")
by convention, we use uppercase letters for global constants because it ensures that no matter how large the program is, the readers of programs 
can easily distinguish such variables from others

the advantage of using variable names instead of constants is that a single edit of a constant definition affects all uses

Literal constants (define WIDTH 200)
computed constants (define MID-WIDTH (/ WIDTH 2))

Exercise 30 Define constants for the price optimization program at the movie theater so that the price sensitivity of attendance 
(15 people for every 10 cents) become a computed constant 
(define base-attendees 120)
(define base-price 5.0)
(define change-in-attendees 15)
(define change-in-price 0.1) 
(define variable-cost-per-attendee 1.5)
(define PRICE-SENSITIVITY (/ change-in-attendees change-in-price))

(define (attendees ticket-price)
      (- base-attendees (* (- ticket-price base-price) PRICE-SENSITIVITY)))
 
  (define (revenue ticket-price)
      (* ticket-price (attendees ticket-price))) 
  
   (define (cost ticket-price)
     (* variable-cost-per-attendee (attendees ticket-price)))
   
   (define (profit ticket-price)
      (- (revenue ticket-price) (cost ticket-price)))

2.5 Programs
From a coding perspective, a program is just a bunch of function and constant definitions. Usually one function is singled out as the 
"main" function and this main function tends to compose others. From this perspective there are 2 kinds.
Batch program: consumes all of its inputs at once and computes its result. Main function is the composition of auxiliary functions 
The operating system calls the main function on its inputs and waits for the program's output
Interactive program: consumes some of its inputs, computes, prodcues some output, consumes more input, and so on
  event: when an input shows up, interactive programs are created as event-driven programs. Main function uses an expression to 
  describe which functions to call for which kind of events, event handlers: these functions 
  
This book focuses mostly on programs that interact via graphical user interfaces (GUI)

read-file: reads the content of an entire file as a string
write-file: which creates a file from a given string, if the file already exists it will replace its content with the given string

(write-file "sample.dat" "212")
"sample.dat"
(read-file "sample.dat")
"212"

'stdout: standard output device
'stdin: standard input device

write-file also accepts 'stdout as the first argument and then displays the resulting file content
(write-file 'stdout "212/n")
212
'stdout 

read-file accepts 'stdin in lieu of file name and then reads input from the current interactions area 

(define (C f)
  (* 5/9 (- f 32)))
(define (convert in out)
  (write-file out
              (string-append
               (number->string
                (C
                 (string->number
                  (read-file in))))
               "\n")))
 (write-file "sample.dat" "212")
 "sample.dat"
 (convert "sample.dat" 'stdout)
 100 
 'stdout
(convert "sample.dat" "out.dat")
"out.dat"
(read-file "out.dat")
"100"

Exercise 31  
Recall the letter program from Composing Functions. 
(define (letter fst lst signature-name)
  (string-append
    (opening fst)
    "\n\n"
    (body fst lst)
    "\n\n"
    (closing signature-name)))
 
(define (opening fst)
  (string-append "Dear " fst ","))
 
(define (body fst lst)
  (string-append
   "We have discovered that all people with the" "\n"
   "last name " lst " have won our lottery. So, " "\n"
   fst ", " "hurry and pick up your prize."))
 
(define (closing signature-name)
  (string-append
   "Sincerely,"
   "\n\n"
   signature-name
   "\n"))
Here is how to launch the program and have it write it's output to the interactions area: 
> (write-file 'stdout (letter "Matthew" "Fisler" "Felleisen"))
Dear Matthew,

We have discovered that all people with the
last name Fisler have won our lottery. So, 
Matthew, hurry and pick up your prize.

Sincerely,

Felleisen
'stdout
Here is the letter-writing batch program that reads names from three files and writes a letter to one: 
(define (main in-fst in-lst in-signature out)
  (write-file out
              (letter (read-file in-fst)
                      (read-file in-lst)
                      (read-file in-signature))))
Create appropriate files, launch main, and check whether it delivers the expected letter in a given file. 
(define (main in-fst in-lst in-signature out)
  (write-file out
              (letter (read-file in-fst)
                      (read-file in-lst)
                      (read-file in-signature))))
(write-file "first.dat" "Matt")
(write-file "last.dat" "Johnson")
(write-file "sig.dat" "Edward")
(main "first.dat" "last.dat" "sig.dat" "letter.dat")
(read-file "letter.dat")

