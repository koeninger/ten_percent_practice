constant definitions (define Variable Expression) 
function definitions (define FunctionName Variable ... Variable) Expression)
  (define (
  the name of the function
  followed by several variables, separated by space and ending in )
  and an expression followed by (
function application puts defined functions to work and looks just like the applications of a pre-defined operation
  write (
  write down the name of a defined function f,
  write down as many arguments as f consumes, separated by space, 
  and add ) at the end

Exercise 11 Define a function that consumers two numbers x and y, and that compuates the distance of point (x, y) to the origin
(define x 3)
(define y 4)
(define 
  (distance x y) 
  (sqrt (+ (sqr x) (sqr y))))

Exercise 12 Define the function cvolume which accepts the lenght of a side of an equilateral cube and compuetes its volume
(define 
  (cvolume x) 
  (* x x x))
if you have time consider defining csurface
(define 
  (csurface x) 
  (* 6 (sqr x)))

Exercise 13 Define the function string-first, which extracts the first 1string from a non-empty string
(define 
  (string-first str) 
  (substring str 0 1))

Exerces 14 Define the function string-last, which extracts the last 1string from a non-empty string
(define 
  (string-last str) 
  (string-ith str (- (string-length str) 1)))

Exercise 15 Define ==>. The function consumes two Boolean values, calls them sunny and friday. Its answer is #true if sunny is false
or friday is true. Note logicians call this Boolean operation implication and they use the notation sunny => friday for thsi purpose
(define sunny #true)
(define friday #false)
(define (==> sunny friday) 
  (or (not sunny) (not friday)))

Exercise 16 Define the function image-area which counts the number of pixels in a given image 
(define 
  (image-area img) 
  (* (image-width img) (image-height img)))
  
Exercise 17 Define the funciton image-classify which consumes an image and conditionally produces "tall" if the image is taller 
than wide, "wide" if it is wide and tall, or "sqare" if its width and height are the same 
(define (image-classify img) 
  (if (= (image-width img) (image-height img)) "square" (if (> (image-height img) (image-width img)) "tall" "wide")))
  
Exercise 18 Define the function string-join which consumes two strings and appends them with "_" in between
(define (string-join str1 str2) 
  (string-append str1 "_" str2))
  
Exercise 19 Define the funciton string-insert, which consumes a string str plus a number i and insterts "_" at the ith position of str. 
Assume i is a number between 0 and the length of the given string (inclusive) Ponder how string-insert copes with " "
(define (string-insert str i) 
  (string-append (substring str 0 i) "_" (substring str i)))
> (string-insert " " 1)
" _"
  
Exercise 20 Define the function string-delete which consumes a string plus a number i and deltes the ith position from str. 
Assume i is a number between 0 (inclusive) and the length of the given string (exclusive) Can string-delete deal with empty strings? 
(define (string-delete str i) 
  (string-append 
    (substring str 0 i) 
    (substring str (+ i 1))))
> (string-delete "" 0)
substring: starting index is out of range
  starting index: 1
  valid range: [0, 0]
  string: ""
  
Exercise 21 Use DrRacket’s stepper to evaluate (ff (ff 1)) step by step.
Also try (+ (ff 1) (ff 1)).
Does DrRacket’s stepper reuse the results of computations?

(ff (ff 1))
(ff (* 10 1))
(ff 10)
(* 10 10)
100

(+ (ff 1) (ff 1))
(+ (* 10 1) (ff 1))
(+ 10 (* 10 1))
(+ 10 10)
20

Exercise 22 run in stepper
(define (distance-to-origin x y)
  (sqrt (+ (sqr x) (sqr y))))

(distance-to-origin 3 4)
(sqrt (+ (sqr 3) (sqr 4)))
(sqrt (+ 9 (sqr 4)))
(sqrt (+ 9 16))
(sqrt 25)
5

Exercise 23 run in stepper 
(define (string-first s)
  (substring s 0 1))

(string-first "hello world")
(substring "hello world" 0 1)
"h"

Exercise 24 run in stepper 
(define (==> x y)
  (or (not x) y))

(==> #true #false)
(or (not #true) #false)
(or #false #false)
#false

Exercise 25 Does the stepping suggest how to fix this attempt? 
(define (image-classify img)
  (cond
    [(>= (image-height img) (image-width img))
     "tall"]
    [(= (image-height img) (image-width img))
     "square"]
    [(<= (image-height img) (image-width img))
     "wide"]))

(image-classify (circle 3 "solid" "red"))

;; Yes the "=" clause should come first.

(define (image-classify-fixed img)
  (cond
    [(= (image-height img) (image-width img))
     "square"]
    [(>= (image-height img) (image-width img))
     "tall"]
    [(<= (image-height img) (image-width img))
     "wide"]))
 
Exercise 26 Confirm with stepper
(define (string-insert s i)
  (string-append (substring s 0 i)
                 "_"
                 (substring s i)))

(string-insert "helloworld" 6)
"hellow_orld"
