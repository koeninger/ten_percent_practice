Exercise 59: finish the design of a world program that simulates the traffic light FSA

; physical constants
(define RADIUS 50)
(define WHOLE (rectangle (* 10 RADIUS) (* 3.5 RADIUS) "solid" "black"))
(define RED-LIGHT (circle RADIUS "outline" "red"))
(define YELLOW-LIGHT (circle RADIUS "outline" "yellow"))
(define GREEN-LIGHT (circle RADIUS "outline" "green"))
(define SPACE (rectangle RADIUS RADIUS "solid" "black"))

; graphical constants
(define BACKG (overlay
               (beside RED-LIGHT SPACE YELLOW-LIGHT SPACE GREEN-LIGHT) WHOLE))

; A TrafficLight is one of the following Strings;
; - "red"
; - "green"
; - "yellow"
; intepretation the three strings represent the three 
; possible state that a traffic light may assume

; TrafficLight -> Image
; renders a light bulb according to the TrafficLight tl
(define (draw/bulb tl)
  (circle RADIUS "solid" tl))

; TrafficLight -> Image
; renders the current state cs as an image
(check-expect (tl-render "red") (place-image (draw/bulb "red")
                                             (* RADIUS 2) (/ (image-height BACKG) 2) BACKG))

(define (tl-render cs)
  (place-image (draw/bulb cs)
               (* RADIUS
                  (cond
                    [(string=? "red" cs) 2]
                    [(string=? "yellow" cs) 5]
                    [(string=? "green" cs) 8]))
               (/ (image-height BACKG) 2)
               BACKG))

; TrafficLight -> TrafficLight
; yields the next state, given current state cs
(check-expect (tl-next "red") "green")

(define (tl-next cs)
  (cond 
    [(string=? "red" cs) "green"]
    [(string=? "green" cs) "yellow"]
    [(string=? "yellow" cs) "red"]))

  
; TrafficLight -> TrafficLight
; simulates a clock-based American traffic light

(define (traffic-light-simulation initial-state)
  (big-bang initial-state
    [to-draw tl-render]
    [on-tick tl-next 1])) 
    
Exercise 60: An Alternative data representation for a traffic light program may use numbers instead of strings: 
  ; An N-TrafficLight is one of:
  ; - 0 interpretation the traffic light shows red
  ; - 1 interpretation the traffic light shows green
  ; - 2 interpretation the traffic light shows yellow
  
  It greatly simlifies the definition of tl-next: 
  ; N-TrafficLight -> N-TrafficLight
  ; yields the next state, given current state cs
  (define (tl-next-numeric cs) (modulo (+ cs 1) 3)) 
  
  Reformulate the tl-nexts's tests for tl-next-numeric
  
  ; physical constants
(define RADIUS 50)
(define WHOLE (rectangle
               (* 10 RADIUS) (* 3.5 RADIUS) "solid" "black"))
(define RED-LIGHT (circle RADIUS "outline" "red"))
(define YELLOW-LIGHT (circle RADIUS "outline" "yellow"))
(define GREEN-LIGHT (circle RADIUS "outline" "green"))
(define SPACE (rectangle RADIUS RADIUS "solid" "black"))

; graphical constants
(define BACKG (overlay
               (beside RED-LIGHT SPACE YELLOW-LIGHT SPACE GREEN-LIGHT) WHOLE))

; A N-TrafficLight is one of:
; - 0 intepretation the traffic light shows red
; - 1 intepretation the traffic light shows green
; - 2 intepretation the traffic light shows yellow

; N-TrafficLight -> String
; converts a TrafficLight into a String representing a color

(check-expect (conv 0) "red")
(check-expect (conv 1) "green")
(check-expect (conv 2) "yellow")

(define (conv tl)
  (cond
    [(equal? tl 0) "red"]
    [(equal? tl 1) "green"]
    [(equal? tl 2) "yellow"]))

; N-TrafficLight -> Image
; renders a light bulb according to the TrafficLight tl
(check-expect (draw/bulb 0) (circle RADIUS "solid" (conv 0)))

(define (draw/bulb tl)
  (circle RADIUS "solid" (conv tl)))

; N-TrafficLight -> Image
; renders the current state cs as an image
(check-expect (tl-render 0) (place-image (draw/bulb 0)
                                         (* RADIUS 2) (/ (image-height BACKG) 2) BACKG))
(check-expect (tl-render 1) (place-image (draw/bulb 1)
                                         (* RADIUS 8) (/ (image-height BACKG) 2) BACKG))
(check-expect (tl-render 2) (place-image (draw/bulb 2)
                                         (* RADIUS 5) (/ (image-height BACKG) 2) BACKG))

(define (tl-render cs)
  (place-image (draw/bulb cs)
               (* RADIUS
                  (cond
                    [(<= cs 0) 2]
                    [(= cs 1) 8]
                    [else 5]))
               (/ (image-height BACKG) 2) BACKG))

; N-TrafficLight -> N-TrafficLight
; yields the next state, given current state cs
(check-expect (tl-next-numeric 0) 1)
(check-expect (tl-next-numeric 1) 2)
(check-expect (tl-next-numeric 2) 0)

(define (tl-next-numeric cs)
  (modulo (+ cs 1) 3))


; N-TrafficLight -> N-TrafficLight
; simulates a clock-based American traffic Light

(define (tls initial-state)
  (big-bang initial-state
    [to-draw tl-render]
    [on-tick tl-next-numeric 1]))
  
Exercise 61

