>>> def deco(func):
...     def inner():
...         print('running inner()')
...     return inner
>>> @deco
... def target():
...     print('running target()')
>>> target()
running inner()
>>> target
<function deco.<locals>.inner at 0x1061946a8>



‚ùØ python3 registration.py
running register(<function f1 at 0x102387bf8>)
running register(<function f2 at 0x102387b70>)
running main()
registry -> [<function f1 at 0x102387bf8>, <function f2 at 0x102387b70>]
running f1()
running f2()
running f3()


>>> joe = Customer('John Doe', 0)
>>> ann = Customer('Ann Smith', 1100)
>>> cart = [LineItem('banana', 4, .5),
...         LineItem('apple', 10, 1.5),
...         LineItem('watermellon', 5, 5.0)]
>>> Order(joe, cart, fidelity)
<Order total: 42.00 due: 42.00>
>>> Order(ann, cart, fidelity)
<Order total: 42.00 due: 39.90>
>>> banana_cart = [LineItem('banana', 30, .5),
...                LineItem('apple', 10, 1.5)]
>>> Order(joe, banana_cart, bulk_item)
<Order total: 30.00 due: 28.50>
>>> long_order = [LineItem(str(item_code), 1, 1.0)
...               for item_code in range(10)]
>>> Order(joe, long_order, large_order)
<Order total: 10.00 due: 9.30>
>>> Order(joe, cart, large_order)
<Order total: 42.00 due: 42.00>
>>> Order(joe, long_order, best_promo)
<Order total: 10.00 due: 9.30>
>>> Order(joe, banana_cart, best_promo)
<Order total: 30.00 due: 28.50>
>>> Order(ann, cart, best_promo)
<Order total: 42.00 due: 39.90>


>>> b = 6
>>> def f2(a):
...     print(a)
...     print(b)
...     b = 9
>>> f2(3)
3
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in f2
UnboundLocalError: local variable 'b' referenced before assignment
local variable 'b' referenced before assignment


# class based

>>> avg = Averager()
>>> avg(10)
10.0
>>> avg(11)
10.5
>>> avg(12)
11.0


# using higher order functions

>>> import averager
>>> avg = averager.make_averager()
>>> avg(10)
10.0
>>> avg(11)
10.5
>>> avg(12)
11.0
>>>


# clock demo
**************************************** calling snooze(.123)
[0.12775384s] snooze(0.123) -> None
**************************************** calling factorial(6)
[0.00000108s] factorial(1) -> 1
[0.00002277s] factorial(2) -> 2
[0.00003737s] factorial(3) -> 6
[0.00005155s] factorial(4) -> 24
[0.00006579s] factorial(5) -> 120
[0.00008311s] factorial(6) -> 720
6! =  720



# fib
[0.00000046s] fibonacci(0) -> 0
[0.00000057s] fibonacci(1) -> 1
[0.00006497s] fibonacci(2) -> 1
[0.00000032s] fibonacci(1) -> 1
[0.00000034s] fibonacci(0) -> 0
[0.00000035s] fibonacci(1) -> 1
[0.00001353s] fibonacci(2) -> 1
[0.00002696s] fibonacci(3) -> 2
[0.00010984s] fibonacci(4) -> 3
[0.00000030s] fibonacci(1) -> 1
[0.00000028s] fibonacci(0) -> 0
[0.00000035s] fibonacci(1) -> 1
[0.00001314s] fibonacci(2) -> 1
[0.00002620s] fibonacci(3) -> 2
[0.00000031s] fibonacci(0) -> 0
[0.00000034s] fibonacci(1) -> 1
[0.00001354s] fibonacci(2) -> 1
[0.00000028s] fibonacci(1) -> 1
[0.00000034s] fibonacci(0) -> 0
[0.00000032s] fibonacci(1) -> 1
[0.00001355s] fibonacci(2) -> 1
[0.00002646s] fibonacci(3) -> 2
[0.00005253s] fibonacci(4) -> 3
[0.00009256s] fibonacci(5) -> 5
[0.00021590s] fibonacci(6) -> 8
8


# fib + lru decorator
[0.00000048s] fibonacci(0) -> 0
[0.00000056s] fibonacci(1) -> 1
[0.00006845s] fibonacci(2) -> 1
[0.00000092s] fibonacci(3) -> 2
[0.00008830s] fibonacci(4) -> 3
[0.00000068s] fibonacci(5) -> 5
[0.00010337s] fibonacci(6) -> 8
8


# singledispatch decorator
>>> from htmlizer import htmlize
>>> htmlize({1,2,3})
'<pre>{1, 2, 3}</pre>'
>>> htmlize(abs)
'<pre>&lt;built-in function abs&gt;</pre>'
>>> htmlize(42)
'<pre>42</pre>'
>>> htmlize("Hello world")
'<pre>&#x27;Hello world&#x27;</pre>'
>>> print(htmlize(['alpha', 66, {3, 2, 1}]))
<pre>[&#x27;alpha&#x27;, 66, {1, 2, 3}]</pre>

>>> from htmlizer2 import htmlize
>>> print(htmlize(['alpha', 66, {3, 2, 1}]))
<ul>
<li><p>alpha</p><li>
</li><pre>66 (0x42)</pre><li>
</li><pre>{1, 2, 3}</pre></li>
</ul>

