plot(data,function, 'r') //r is color,
hist(var)
hold on; //plots next figure on top of old one
xlabel('time')
ylabel('value')
legend('first line', 'second line') // depeneding on nmumber of plots
print -dpng "myplot.png" //saves plot to png


//new windows
figure(1); plot(..);
figure(2); plot(..);


subplot(1,2,1) //divides plot into 1x2 grid, access first element
-- make some plots to fill them

axis([0.5 1 -1 1])
	min/max x x y y

imagesc(A) //a is a matrix, plots the matrix
iamgess(A), colorbar, colormap gray;


----------

load data.dat
	load the file data.dat
save data.dat var
	saves var to data.dat, add -ascii to save as text

who
	shows current variables
whos
	shows current variables + size

clear var
	deletes variable var

help cmd

disp(var)
	prints varible out


format long
format short
	changes how many decimals appear


--------------

generate matrices:

use ; to suppress output

m = ones(2,3)
	makes a 2x3 matrix with all ones

m = zeroes(2,3)
	makes a 2x3 matrix with all zeroes

m = rand(2,3)
	makes a 2x3 matrix with all random numbers

m = randn(2,3)
	makes a 2x3 matrix with all random numbers (gaussian dist)

v = 1:0.1:2
	makes vector with values between 1 and 2, incrementing by 0.1


A = 1 2
	3 4
	5 6
A(3,2)
	6

A([1,3], :) //get first and third index of A, all columns
	1 2
	5 6

A(:,2)
	2
	4
	6

A [B C] //these commands can also be used on matrices




A = [1;2;3]
A = [A,[4;5;6]];  //append col vector to the right
	= 1 4
	  2 5
	  3 6
A(:) //put all elements of A into single col vector


":" means every element along that row/column

A(:,2) //everything in second ccolumn of A



MATRIX---------
operations

A'
	transpose
max(A)
	returns max val (col)
max(max(A))
	returns actual max value of A
floor(A)
	returns lowest val
[val, ind] = max(A)
	returns max val and index
max(A,[],1)
	takes max per column of A
max(A,[],2)
	takes max per row of A

sum(A)
	sums elements of A
sum(A,1)
	sums columns of A
sum(A,2)
	sums rows of A


trick:
	sum(sum(A .* eye(9))) //sums identity diagonal of A


pinv(A)
	pseudo inverse of A


element-wise operations (do command on matching indices or per element)

A < 3 //element-wies comparison, returns 0 or 1
find (a < 3) //returns actual numbers
A + 1
A .* B
A .^ B
1 ./ A
log(A)
exp(A)
abs(A)

















