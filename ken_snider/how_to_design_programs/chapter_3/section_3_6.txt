;Exercise 39. Good programmers ensure that an image such as CAR can be enlarged or reduced via a single change to a constant definition.Good programmers establish a single point of control for all aspects of their programs, not just the graphical constants. Several chapters deal with this issue. We started the development of our car image with a single plain definition:
;
;(define WHEEL-RADIUS 5)
;
;The definition of WHEEL-DISTANCE is based on the wheel’s radius. Hence, changing WHEEL-RADIUS from 5 to 10 doubles the size of the car image. This kind of program organization is dubbed single point of control, and good design employs this idea as much as possible.
;Develop your favorite image of an automobile so that WHEEL-RADIUS remains the single point of control. 

(define WHEEL-RADIUS 5)
(define WHEEL-DISTANCE
  (* WHEEL-RADIUS 4))
(define WHEEL
  (circle (* 2 WHEEL-RADIUS) "solid" "black"))
(define SPACE
  (rectangle WHEEL-DISTANCE WHEEL-RADIUS "solid" "white"))
(define BOTH-WHEELS
  (beside WHEEL SPACE WHEEL))
(define CAR-LENGTH
  (+ WHEEL-DISTANCE
    (* 5 WHEEL-RADIUS)))
(define CAR-HEIGHT
  (* WHEEL-RADIUS 3))


(define CAR
  (above
    (rectangle CAR-LENGTH CAR-HEIGHT "solid" "red")
      (underlay/offset (rectangle (* 2 CAR-LENGTH) CAR-HEIGHT "solid" "red") 0 (* .5 CAR-HEIGHT) BOTH-WHEELS)
  )
)

; ===

; Exercise 40. Formulate the examples as BSL tests, that is, using the check-expect form. Introduce a mistake. Re-run the tests.

; WorldState -> WorldState 
; moves the car by 3 pixels for every clock tick
; examples: 
;   given: 20, expect 23
(check-expect (ws 20) 23)
;   given: 78, expect 81
(check-expect (ws 78) 81)
(define (tock ws)
  (+ ws 3))

; Successful result:
; Both tests passed!
; >

; Error Result (+ ws 4):
; Ran 2 tests.
;0 tests passed.
;No signature violations.
;
;Check failures:
;	Actual value 24 differs from 23, the expected value.
;at line 5, column 0 
;	Actual value 82 differs from 81, the expected value.
;at line 7, column 0 

; Exercise 41. Finish the sample problem and get the program to run. That is, assuming that you have solved exercise 39, define the constants BACKGROUND and Y-CAR. Then assemble all the function definitions, including their tests. When your program runs to your satisfaction, add a tree to the scenery. We used
;(define tree
;  (underlay/xy (circle 10 "solid" "green")
;               9 15
;               (rectangle 2 20 "solid" "brown")))
;to create a tree-like shape. Also add a clause to the big-bang expression that stops the animation when the car has disappeared on the right side.

(define WIDTH-OF-WORLD 200)
 
(define WHEEL-RADIUS 5)
(define WHEEL-DISTANCE
  (* WHEEL-RADIUS 4))
(define WHEEL
  (circle (* 2 WHEEL-RADIUS) "solid" "black"))
(define SPACE
  (rectangle WHEEL-DISTANCE WHEEL-RADIUS "solid" "white"))
(define BOTH-WHEELS
  (beside WHEEL SPACE WHEEL))
(define CAR-LENGTH
  (+ WHEEL-DISTANCE
    (* 5 WHEEL-RADIUS)))
(define CAR-HEIGHT
  (* WHEEL-RADIUS 3))


(define CAR
  (above
    (rectangle CAR-LENGTH CAR-HEIGHT "solid" "red")
      (underlay/offset (rectangle (* 2 CAR-LENGTH) CAR-HEIGHT "solid" "red") 0 (* .5 CAR-HEIGHT) BOTH-WHEELS)
  )
)

(define TREE
  (underlay/xy (circle 10 "solid" "green")
               9 15
               (rectangle 2 20 "solid" "brown")))


(define Y-CAR CAR-HEIGHT)
(define BACKGROUND
  (place-image TREE (* WIDTH-OF-WORLD .5) 20
               (empty-scene WIDTH-OF-WORLD (* 2.5 CAR-HEIGHT))))
 
; WorldState -> WorldState
; moves the car by 3 pixels for every clock tick
; examples:
(check-expect (tock 20) 23)
(check-expect (tock 78) 81)
(define (tock ws)
  (+ ws 3))

; WorldState -> Image
; places the car into the BACKGROUND scene,
; according to the given world state 
; eamples:
(check-expect (render 50)
              (place-image CAR 50 Y-CAR BACKGROUND))
(check-expect (render 200)
              (place-image CAR 200 Y-CAR BACKGROUND))
(define (render ws)
   (place-image CAR ws Y-CAR BACKGROUND))

; WorldState -> Boolean
; Stops the program when we reach a given state
(check-expect (end? 0) #false)
(check-expect (end? (+ WIDTH-OF-WORLD CAR-LENGTH)) #true)
(define (end? ws)
  (>= ws (+ WIDTH-OF-WORLD CAR-LENGTH)))

; WorldState -> WorldState
; launches the program from some initial state 
(define (main ws)
   (big-bang ws
     [on-tick tock]
     [to-draw render]
     [stop-when end?]))

;Exercise 42. Modify the interpretation of the sample data definition so that a state denotes the x-coordinate of the right-most edge of the car.

(define WIDTH-OF-WORLD 500)
 
(define WHEEL-RADIUS 5)
(define WHEEL-DISTANCE
  (* WHEEL-RADIUS 4))
(define WHEEL
  (circle (* 2 WHEEL-RADIUS) "solid" "black"))
(define SPACE
  (rectangle WHEEL-DISTANCE WHEEL-RADIUS "solid" "white"))
(define BOTH-WHEELS
  (beside WHEEL SPACE WHEEL))
(define CAR-LENGTH
  (+ WHEEL-DISTANCE
    (* 5 WHEEL-RADIUS)))
(define CAR-HEIGHT
  (* WHEEL-RADIUS 3))

(define CAR
  (above
    (rectangle CAR-LENGTH CAR-HEIGHT "solid" "red")
      (underlay/offset (rectangle (* 2 CAR-LENGTH) CAR-HEIGHT "solid" "red") 0 (* .5 CAR-HEIGHT) BOTH-WHEELS)
  )
)

(define TREE
  (underlay/xy (circle 10 "solid" "green")
               9 15
               (rectangle 2 20 "solid" "brown")))


(define Y-CAR CAR-HEIGHT)
(define BACKGROUND
  (place-image TREE (* WIDTH-OF-WORLD .5) 20
               (empty-scene WIDTH-OF-WORLD (* 2.5 CAR-HEIGHT))))
 
; WorldState -> WorldState
; moves the car by 3 pixels for every clock tick
; examples:
(check-expect (tock 20) 23)
(check-expect (tock 78) 81)
(define (tock ws)
  (+ ws 3))

; WorldState -> Image
; places the car into the BACKGROUND scene,
; according to the given world state 
; eamples:
(check-expect (render 50)
              (place-image CAR (+ 50 CAR-LENGTH) Y-CAR BACKGROUND))
(check-expect (render 200)
              (place-image CAR (+ 200 CAR-LENGTH) Y-CAR BACKGROUND))
(define (render ws)
   (place-image CAR (+ ws CAR-LENGTH) Y-CAR BACKGROUND))

; WorldState -> Boolean
; Stops the program when we reach a given state
(check-expect (end? 0) #false)
(check-expect (end? (+ WIDTH-OF-WORLD CAR-LENGTH)) #true)
(define (end? ws)
  (>= ws (+ WIDTH-OF-WORLD CAR-LENGTH)))

; WorldState -> WorldState
; launches the program from some initial state 
(define (main ws)
   (big-bang ws
     [on-tick tock]
     [to-draw render]
     [stop-when end?]))

; Exercise 43. Design the functions tock and render. Then develop a big-bang expression so that once again you get an animation of a car traveling from left to right across the world’s canvas.

(define WIDTH-OF-WORLD 500)

(define WHEEL-RADIUS 5)
(define WHEEL-DISTANCE
  (* WHEEL-RADIUS 4))
(define WHEEL
  (circle (* 2 WHEEL-RADIUS) "solid" "black"))
(define SPACE
  (rectangle WHEEL-DISTANCE WHEEL-RADIUS "solid" "white"))
(define BOTH-WHEELS
  (beside WHEEL SPACE WHEEL))
(define CAR-LENGTH
  (+ WHEEL-DISTANCE
    (* 5 WHEEL-RADIUS)))
(define CAR-HEIGHT
  (* WHEEL-RADIUS 3))

(define CAR
  (above
    (rectangle CAR-LENGTH CAR-HEIGHT "solid" "red")
      (underlay/offset (rectangle (* 2 CAR-LENGTH) CAR-HEIGHT "solid" "red") 0 (* .5 CAR-HEIGHT) BOTH-WHEELS)
  )
)

(define TREE
  (underlay/xy (circle 10 "solid" "green")
               9 15
               (rectangle 2 20 "solid" "brown")))


(define Y-CAR CAR-HEIGHT)
(define BACKGROUND
  (place-image TREE (* WIDTH-OF-WORLD .5) 20
               (empty-scene WIDTH-OF-WORLD (* 2.5 CAR-HEIGHT))))

; WorldState -> WorldState
; moves the car by 3 pixels for every clock tick
; examples:
(check-expect (tock 20) 23)
(check-expect (tock 78) 81)
(define (tock ws)
  (+ ws 3))

; WorldState -> Image
; places the car into the BACKGROUND scene,
; according to the given world state
; eamples:
(check-expect (render 50)
              (place-image CAR (+ 50 CAR-LENGTH) Y-CAR BACKGROUND))
(check-expect (render 200)
              (place-image CAR (+ 200 CAR-LENGTH) Y-CAR BACKGROUND))
(define (render ws)
   (place-image CAR (+ ws CAR-LENGTH) Y-CAR BACKGROUND))

; WorldState -> Boolean
; Stops the program when we reach a given state
(check-expect (end? 0) #false)
(check-expect (end? (+ WIDTH-OF-WORLD CAR-LENGTH)) #true)
(define (end? ws)
  (>= ws (+ WIDTH-OF-WORLD CAR-LENGTH)))

; WorldState -> WorldState
; launches the program from some initial state
(define (main ws)
   (big-bang ws
     [on-tick tock]
     [to-draw render]
     [stop-when end?]))


