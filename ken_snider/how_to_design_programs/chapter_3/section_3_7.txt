; Exercise 45. Design a “virtual cat” world program that continuously moves the cat from left to right. Let’s call it cat-prog and let’s assume it consumes the starting position of the cat. Furthermore, make the cat move three pixels per clock tick. Whenever the cat disappears on the right, it reappears on the left.

(define cat1 .)

(define cat2 .)

(define WIDTH-OF-WORLD 200)

(define CAT-HEIGHT (image-height cat1))
(define CAT-WIDTH (image-width cat1))

(define BACKGROUND (empty-scene WIDTH-OF-WORLD CAT-HEIGHT))

; WorldState -> WorldState
; moves the cat by 3 pixels for every clock tick.
; If the cat leaves the world, reset ws to 9.
; examples:
(check-expect (tock (/ WIDTH-OF-WORLD 2)) (+ (/ WIDTH-OF-WORLD 2) 3))
(check-expect (tock (+ WIDTH-OF-WORLD (+ CAT-WIDTH 1))) 0)
(define (tock ws)
  (cond
    [(< ws (+ WIDTH-OF-WORLD CAT-WIDTH)) (+ ws 3)]
    [else 0]))

; WorldState -> Image
; Renders the cat at the point specified on the background
; by the position of the WorldState (in pixels)
(check-expect (render 20)
              (place-image cat1 20 (* CAT-HEIGHT .5) BACKGROUND))
(check-expect (render 42)
              (place-image cat1 42 (* CAT-HEIGHT .5) BACKGROUND))
(define (render ws)
   (place-image cat1 ws (* CAT-HEIGHT .5) BACKGROUND))

(define (main ws)
   (big-bang ws
     [on-tick tock]
     [to-draw render]))

; Exercise 46. Adjust the rendering function from exercise 45 so that it uses one cat image or the other based on whether the x-coordinate is odd. Read up on odd? in the HelpDesk, and use a cond expression to select cat images.

(define cat1 .)

(define cat2 .)

(define WIDTH-OF-WORLD 200)

(define CAT-HEIGHT (image-height cat1))
(define CAT-WIDTH (image-width cat1))

(define BACKGROUND (empty-scene WIDTH-OF-WORLD CAT-HEIGHT))

; WorldState -> WorldState
; moves the cat by 3 pixels for every clock tick.
; If the cat leaves the world, reset ws to 9.
; examples:
(check-expect (tock (/ WIDTH-OF-WORLD 2)) (+ (/ WIDTH-OF-WORLD 2) 3))
(check-expect (tock (+ WIDTH-OF-WORLD (+ CAT-WIDTH 1))) 0)
(define (tock ws)
  (cond
    [(< ws (+ WIDTH-OF-WORLD CAT-WIDTH)) (+ ws 3)]
    [else 0]))

; WorldState -> Image
; Renders the cat at the point specified on the background
; by the position of the WorldState (in pixels)
; Uses a different image for even and odd steps
(check-expect (render 21)
              (place-image cat1 21 (* CAT-HEIGHT .5) BACKGROUND))
(check-expect (render 42)
              (place-image cat2 42 (* CAT-HEIGHT .5) BACKGROUND))
(define (render ws)
  (cond
    [(odd? ws) (place-image cat1 ws (* CAT-HEIGHT .5) BACKGROUND)]
    [else (place-image cat2 ws (* CAT-HEIGHT .5) BACKGROUND)]))

(define (main ws)
   (big-bang ws
     [on-tick tock]
     [to-draw render]))

; Exercise 47. Design a world program that maintains and displays a “happiness gauge.” Let’s call it gauge-prog, and let’s agree that the program consumes the maximum level of happiness. The gauge display starts with the maximum score, and with each clock tick, happiness decreases by -0.1; it never falls below 0, the minimum happiness score. Every time the down arrow key is pressed, happiness increases by 1/5; every time the up arrow is pressed, happiness jumps by 1/3.

; To show the level of happiness, we use a scene with a solid, red rectangle with a black frame. For a happiness level of 0, the red bar should be gone; for the maximum happiness level of 100, the bar should go all the way across the scene.

(define WIDTH-OF-WORLD 100)
(define HEIGHT-OF-WORLD 40)

(define BACKGROUND (empty-scene WIDTH-OF-WORLD HEIGHT-OF-WORLD))

; HappyState is a Number
; HappyState represents the happiness of the World (or cat, same thing).

; HappyState -> HappyState
; Decrements by 0.1 for every clock tick.
; If the HappyState reaches 0, do not decrement.
; examples:
(check-expect (tock (/ WIDTH-OF-WORLD 2)) (- (/ WIDTH-OF-WORLD 2) 0.1))
(check-expect (tock (* WIDTH-OF-WORLD 1.5)) (- WIDTH-OF-WORLD 0.1))
(check-expect (tock 0) 0)
(define (tock hs)
  (cond
    [(> hs 0.1) (cond
                  [(> hs WIDTH-OF-WORLD) (- WIDTH-OF-WORLD 0.1)]
                  [else (- hs 0.1)])]
    [else 0]))

; HappyState String -> HappyState
; Increases the HappyState on certain keypresses
(check-expect (key-event 30 "up") 40)
(check-expect (key-event 30 "w") 30)
(define (key-event hs key)
  (cond
    [(key=? "up" key) (+ hs (* hs 1/3))]
    [(key=? "down" key) (+ hs (* hs 1/5))]
    [else hs]))

; HappyState -> Image
; Renders the Happiness at the point specified on the background
; by the position of the HappyState (in percent)
(check-expect (render 21)
              (place-image/align (rectangle 21 HEIGHT-OF-WORLD "solid" "red") 0 0 "left" "top" BACKGROUND))
(check-expect (render 42)
              (place-image/align (rectangle 42 HEIGHT-OF-WORLD "solid" "red") 0 0 "left" "top" BACKGROUND))
(define (render hs)
  (place-image/align (rectangle hs HEIGHT-OF-WORLD "solid" "red") 0 0 "left" "top" BACKGROUND))

; HappyState -> Boolean
; Stops the program when we reach a given state
(check-expect (end? 0) #true)
(check-expect (end? 50) #false)
(define (end? hs)
  (= hs 0))

(define (main hs)
   (big-bang hs
     [on-key key-event]
     [on-tick tock]
     [to-draw render]
     [stop-when end?]))
