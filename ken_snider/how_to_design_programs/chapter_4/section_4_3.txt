; Exercise 50.  If you copy and paste the above function definition into the definitions area of DrRacket and click RUN, DrRacket highlights two of the three cond lines. This coloring tells you that your test cases do not cover the full conditional. Add enough tests to make DrRacket happy. 

; Original

; TrafficLight -> TrafficLight
; yields the next state given current state s
(check-expect (traffic-light-next "red") "green")
(define (traffic-light-next s)
  (cond
    [(string=? "red" s) "green"]
    [(string=? "green" s) "yellow"]
    [(string=? "yellow" s) "red"]))

; New

; TrafficLight -> TrafficLight
; yields the next state given current state s
(check-expect (traffic-light-next "red") "green")
(check-expect (traffic-light-next "green") "yellow")
(check-expect (traffic-light-next "yellow") "red")
(define (traffic-light-next s)
  (cond
    [(string=? "red" s) "green"]
    [(string=? "green" s) "yellow"]
    [(string=? "yellow" s) "red"]))

; ===

; Exercise 51. Design a big-bang program that simulates a traffic light for a given duration. The program renders the state of a traffic light as a solid circle of the appropriate color, and it changes state on every clock tick. What is the most appropriate initial state? Ask your engineering friends. 

; Trafficlight is a Ntring, representing the current colour of a traffic light.
; Tock is a Number, representing the number of clock ticks since the program began.
; MaxDuration is a Number, representing the maximum number of clock ticks expected.


; TrafficLight -> TrafficLight
; yields the next state given current state s
; Also needs to increment Tock by 1
(check-expect (traffic-light-next "red") "green")
(check-expect (traffic-light-next "green") "yellow")
(check-expect (traffic-light-next "yellow") "red")
(define (traffic-light-next ls)
  (cond
    [(string=? "red" ls) "green"]
    [(string=? "green" ls) "yellow"]
    [(string=? "yellow" ls) "red"]))

; LightState -> Image
; Renders the Happiness at the point specified on the background
; by the position of the HappyState (in percent)
(check-expect (render "red")
              (circle 100 "solid" "red"))
(check-expect (render "yellow")
              (circle 100 "solid" "yellow"))
(check-expect (render "green")
              (circle 100 "solid" "green"))
(define (render ls)
  (circle 100 "solid" ls))

; Tock -> Boolean
; Stops the program when we reach a given state
(check-expect (end? tock) #true)
(check-expect (end? (- tock 1)) #false)
(define (end? tock)
  (= tock MaxDuration))

(define (main MaxDuration)
   (big-bang "red"
     [on-tick traffic-light-next]
     [to-draw render]
     [stop-when end?]))
