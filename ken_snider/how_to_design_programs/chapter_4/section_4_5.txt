; Exercise 54. Why is (string=? "resting" x) incorrect as the first condition in show? Conversely, formulate a completely accurate condition, that is, a Boolean expression that evaluates to #true precisely when x belongs to the first sub-class of LRCD.

; (define (show x)
;  (cond
;    [(string? x) ...]
;    [(<= -3 x -1) ...]
;    [(>= x 0) ...]))

; (string=? "resting" x) would be incurrect because x is a representation of LRCD, which is an Itemization that includes:
; – "resting"
; – a Number between -3 and -1
; – a NonnegativeNumber 
;
; Numbers are not strings and would be errors to this function.

; A more useful expression would be:
(and (string? x) (string=? x "resting"))

; ===

; Exercise 55. Take another look at show. It contains three instances of an expression with the approximate shape:
(place-image ROCKET 10 (- ... CENTER) BACKG)

;This expression appears three times in the function: twice to draw a resting rocket and once to draw a flying rocket. Define an auxiliary function that performs this work and thus shorten show. Why is this a good idea? You may wish to reread Prologue: How to Program. 

; Number -> Image
; Renders the rocket images based on the output of show
(check-expect (place-rocket 0) (place-image ROCKET 10 (- 0 CENTER) BACKG))
(check-expect (place-rocket 42) (place-image ROCKET 10 (- 42 CENTER) BACKG))
(define (place-rocket x)
  (place-image ROCKET 10 (- x CENTER) BACKG))

; ===

; Exercise 56. Define main2 so that you can launch the rocket and watch it lift off. Read up on the on-tick clause to determine the length of one tick and how to change it.
; If you watch the entire launch, you will notice that once the rocket reaches the top something curious happens. Explain. Add a stop-when clause to main2 so that the simulation of the liftoff stops gracefully when the rocket is out of sight. 

(define HEIGHT 300) ; distances in pixels 
(define WIDTH  100)
(define YDELTA 3)
 
(define BACKG  (empty-scene WIDTH HEIGHT))
(define ROCKET (rectangle 5 30 "solid" "red"))
 
(define CENTER (/ (image-height ROCKET) 2))

; An LRCD (for launching rocket countdown) is one of:
; – "resting"
; – a Number between -3 and -1
; – a NonnegativeNumber 
; interpretation a grounded rocket, in countdown mode,
; a number denotes the number of pixels between the
; top of the canvas and the rocket (its height)

; Number -> Image
; Renders the rocket images based on the output of show
(check-expect (place-rocket 0) (place-image ROCKET 10 (- 0 CENTER) BACKG))
(check-expect (place-rocket 42) (place-image ROCKET 10 (- 42 CENTER) BACKG))
(define (place-rocket x)
  (place-image ROCKET 10 (- x CENTER) BACKG))

; An LRCD (for launching rocket countdown) is one of:
; – "resting"
; – a Number between -3 and -1
; – a NonnegativeNumber 
; interpretation a grounded rocket, in countdown mode,
; a number denotes the number of pixels between the
; top of the canvas and the rocket (its height)

; LRCD -> Image
; Calls place-rocket based on the LRCD 
(check-expect (show "resting") (place-rocket HEIGHT))
(check-expect (show -2) (place-image (text "-2" 20 "red") 10 (* 3/4 WIDTH) (place-rocket HEIGHT)))
(check-expect (show 0) (place-rocket 0))
(check-expect (show HEIGHT) (place-rocket HEIGHT))
(check-expect (show 53) (place-rocket 53))
(define (show x)
  (cond
    [(string? x)
     (place-rocket HEIGHT)]
    [(<= -3 x -1)
     (place-image (text (number->string x) 20 "red") 10 (* 3/4 WIDTH)
                  (place-rocket HEIGHT))]
    [(>= x 0)
     (place-rocket x)]))

; LRCD KeyEvent -> LRCD
; starts the countdown when space bar is pressed, 
; if the rocket is still resting 
(check-expect (launch "resting" " ") -3)
(check-expect (launch "resting" "a") "resting")
(check-expect (launch -3 " ") -3)
(check-expect (launch -1 " ") -1)
(check-expect (launch 33 " ") 33)
(check-expect (launch 33 "a") 33)
(define (launch x ke)
  (cond
    [(string? x) (if (string=? " " ke) -3 x)]
    [(<= -3 x -1) x]
    [(>= x 0) x]))

; LRCD -> LRCD
; raises the rocket by YDELTA, if it is moving already
(check-expect (fly "resting") "resting")
(check-expect (fly -3) -2)
(check-expect (fly -2) -1)
(check-expect (fly -1) HEIGHT)
(check-expect (fly 10) (- 10 YDELTA))
(check-expect (fly 22) (- 22 YDELTA))
(define (fly x)
  (cond
    [(string? x) x]
    [(<= -3 x -1) (if (= x -1) HEIGHT (+ x 1))]
    [(>= x 0) (- x YDELTA)]))

; LRCD -> Boolean
; Stop world when rocket clears the screen
(check-expect (end? "resting") #false)
(check-expect (end? -1) #false)
(check-expect (end? 1) #false)
(check-expect (end? 0) #true)
(define (end? x)
  (cond
    [(string? x) #false]
    [else (= x 0)]))

; LRCD -> LRCD
; Start with resting
(define (main1 s)
  (big-bang s
    [to-draw show]
    [on-key launch]))

; LRCD -> LRCD
; Start with resting
(define (main2 s)
  (big-bang "resting"
    [to-draw show]
    [on-key launch]
    [on-tick fly .2]
    [stop-when end?]))

; ===

; Exercise 57. Recall that the word “height” forced us to choose one of two possible interpretations. Now that you have solved the exercises in this section, solve them again using the first interpretation of the word. Compare and contrast the solutions.

The second interpretation of "height" was the height from the ground (what humans usually think of as "height"), instead of the distance from the top of the canvas.

The biggest change from this adjustment is that the "flight" now needs ascending numbers instead of descending - that is, the launch starts from 1, instead of HEIGHT (the height of the scene). end? would need to calculate when the rocket was HEIGHT pixels (plus have of the rocket height since it is positioned from its center) above the ground to be "done", and that fly would have to move from -1 to half of rocket-height - again, because the rocket is positioned from its center, and at an LRCD of 0, it would be half underground.
