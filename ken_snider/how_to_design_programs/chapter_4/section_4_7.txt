; Exercise 59. Finish the design of a world program that simulates the traffic light FSA. 

; ---

(define LIGHT (place-image (circle 10 "outline" "red") 15 15
                           (place-image (circle 10 "outline" "yellow") 45 15
                                        (place-image (circle 10 "outline" "green") 75 15 (empty-scene 90 30)))))

; A TrafficLight is one of the following Strings:
; – "red"
; – "green"
; – "yellow"
; interpretation the three strings represent the three 
; possible states that a traffic light may assume

; TrafficLight -> TrafficLight
; yields the next state, given current state cs
(check-expect (tl-next "green") "yellow")
(check-expect (tl-next "yellow") "red")
(check-expect (tl-next "red") "green")
(define (tl-next cs)
  (cond
    [(string=? "red" cs) "green"]
    [(string=? "green" cs) "yellow"]
    [(string=? "yellow" cs) "red"]))

; TrafficLight -> Image
; renders the current state cs as an image
(check-expect (tl-render "red") (place-image (circle 10 "solid" "red") 15 15 LIGHT))
(check-expect (tl-render "yellow") (place-image (circle 10 "solid" "yellow") 45 15 LIGHT))
(check-expect (tl-render "green") (place-image (circle 10 "solid" "green") 75 15 LIGHT))
(define (tl-render cs)
  (cond
    [(string=? "red" cs) (place-image (circle 10 "solid" "red") 15 15 LIGHT)]
    [(string=? "yellow" cs) (place-image (circle 10 "solid" "yellow") 45 15 LIGHT)]
    [(string=? "green" cs) (place-image (circle 10 "solid" "green") 75 15 LIGHT)]))

; TrafficLight -> TrafficLight
; simulates a clock-based American traffic light
(define (traffic-light-simulation initial-state)
  (big-bang initial-state
    [to-draw tl-render]
    [on-tick tl-next 1]))

; ===

; Exercise 60. An alternative data representation for a traffic light program may use numbers instead of strings:
; An N-TrafficLight is one of:
; – 0 interpretation the traffic light shows red
; – 1 interpretation the traffic light shows green
; – 2 interpretation the traffic light shows yellow
;It greatly simplifies the definition of tl-next:
; N-TrafficLight -> N-TrafficLight
; yields the next state, given current state cs
;(define (tl-next-numeric cs) (modulo (+ cs 1) 3))
;Reformulate tl-next’s tests for tl-next-numeric.
;Does the tl-next function convey its intention more clearly than the tl-next-numeric function? If so, why? If not, why not?

; ---

; An N-TrafficLight is one of:
; – 0 interpretation the traffic light shows red
; – 1 interpretation the traffic light shows green
; – 2 interpretation the traffic light shows yellow

; N-TrafficLight -> N-TrafficLight
; yields the next state, given current state cs
(check-expect (tl-next-numeric 0) 1)
(check-expect (tl-next-numeric 1) 2)
(check-expect (tl-next-numeric 2) 0)
(define (tl-next-numeric cs) (modulo (+ cs 1) 3))

; This does not convey the intention more clearly. The connection between the numbers, and their meanings, is arbitrary. A red light using string "red" is clear and unambiguous by comparison. 

; ===

;Exercise 61. As From Functions to Programs says, programs must define constants and use names instead of actual constants. In this spirit, a data definition for traffic lights must use constants, too:This form of data definition is what a seasoned designer would use.
;(define RED 0)
;(define GREEN 1)
;(define YELLOW 2)
; 
; An S-TrafficLight is one of:
; – RED
; – GREEN
; – YELLOW
;If the names are chosen properly, the data definition does not need an interpretation statement.
; S-TrafficLight -> S-TrafficLight
; yields the next state, given current state cs
;     
;(check-expect (tl-next- ... RED) YELLOW)
;(check-expect (tl-next- ... YELLOW) GREEN)
;
;(define (tl-next-numeric cs)
;  (modulo (+ cs 1) 3))
;    
;(define (tl-next-symbolic cs)
;  (cond
;    [(equal? cs RED) GREEN]
;    [(equal? cs GREEN) YELLOW]
;    [(equal? cs YELLOW) RED]))
;
;Above are two different functions that switch the state of a traffic light in a simulation program. Which of the two is properly designed using the recipe for itemization? Which of the two continues to work if you change the constants to the following
;(define RED "red")
;(define GREEN "green")
;(define YELLOW "yellow")
;Does this help you answer the questions?

Obviously the itemized list is easier to read - As with the previous exercise, variables that are more obvious to humans will make for easier-maintained code - also evidenced by the fact that less information is needed in the function header.

Designing a function that will work for any value of the constants above, versus a function that will only work for the integers 1-3 makes more sense, especially if there's any chance that the constants will change in the future. Additionally, the itemized condition is much more intuitive for future readers of the code.

