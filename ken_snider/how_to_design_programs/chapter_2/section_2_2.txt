;Exercise 21. Use DrRacket’s stepper to evaluate (ff (ff 1)) step-by-step. Also try (+ (ff 1) (ff 1)). Does DrRacket’s stepper reuse the results of computations?

(define (ff a)
  (* 10 a))

DrRacked appears to calculate each step, as evidenced by it making the same calculation twice in stepping through (+ (ff 1) (ff 1)).

;Exercise 22. Use DrRacket’s stepper on this program fragment:
;(define (distance-to-origin x y)
;  (sqrt (+ (sqr x) (sqr y))))
;(distance-to-origin 3 4)
;Does the explanation match your intuition? 

Yes - DrRacket evaluates the first viarable in the most-nested parenthesis first (x), followed by the second (y), then steps down and evaluates the next set of parenthesis in the function.

;Exercise 23. The first 1String in "hello world" is "h". How does the following function compute this result?
;(define (string-first s)
;  (substring s 0 1))
;Use the stepper to confirm your ideas.

The function first replaces s with a string, then steps to the beginning (0) of the string, steps 1 step, and records that result ("h").

;Exercise 24. Here is the definition of ==>: y
;(define (==> x y)
;  (or (not x) y))
;Use the stepper to determine the value of (==> #true #false). 

The stepper replaces x/y with the booleans. Stepper determins that not x (not #true) is #false. Stepper then performs an or operation on #false y (#false #false). This resolves to #false, as no part of the or expression is #true.

;Exercise 25. Take a look at this attempt to solve exercise 17:
;(define (image-classify img)
;  (cond
;    [(>= (image-height img) (image-width img)) "tall"]
;    [(= (image-height img) (image-width img)) "square"]
;    [(<= (image-height img) (image-width img)) "wide"]))
;Does stepping through an application suggest a fix?

As the items are evaluated in order, a "square" image will also be a "tall" image above. changing the conditional to ">" instead of ">=" fixes the issue.

;Exercise 26. What do you expect as the value of this program:
(define (string-insert s i)
  (string-append (substring s 0 i)
                 "_"
                 (substring s i)))
 
(string-insert "helloworld" 6)
;Confirm your expectation with DrRacket and its stepper.

First substition counts 6 characters from the beginning (hellow), then inserts the "_" character, than prints the remainder, giving you "hellow_orld". Stepper agrees.
