;Exercise 69. Draw box representations for the solution of exercise 65.
;(define-struct movie [title producer year])
;(define-struct person [name hair eyes phone])
;(define-struct pet [name number])
;(define-struct CD [artist title price])
;(define-struct sweater [material size producer])

                           +=====+
                           |movie|
+==========+================+====+
|title     |producer        |year|
+----------+----------------+----+
|"NPM Wars"|"Nodius Maximus"|2019|
+==========+================+====+

                          +======+
                          |person|
+=====+=====+=====+==============+
|name |hair |eyes |phone         |
+-----+-----+-----+--------------+
|"Bob"|"red"|"two"|"515-555-1234"|
+=====+=====+=====+==============+

           +===+
           |pet|
+=======+======+
|name   |number|
+-------+------+
|"Rogue"|4     |
+=======+======+

                                   +==+
                                   |CD|
+==============+================+=====+
|artist        |title           |price|
+--------------+----------------+-----+
|"The Red Hats"|"Number 8 baby!"|99   |
+==============+================+=====+

                       +=======+
                       |sweater|
+========+=====+===============+
|material|size |producer       |
+--------+-----+---------------+
|"alpaca"|"XXL"|"NiceSweatshop"|
+========+=====+===============+

; ===

; Exercise 70. Spell out the laws for these structure type definitions:
(define-struct centry [name home office cell])
(define-struct phone [area number])

(centry-name (make-centry n0 h0 o0 c0)) == n0
(centry-home (make-centry n0 h0 o0 c0)) == h0
(centry-office (make-centry n0 h0 o0 c0)) == o0
(centry-cell (make-centry n0 h0 o0 c0)) == c0

(phone-area (make-phone a0 n0)) == a0
(phone-number (make-phone a0 n0)) == n0

; ===

; Exercise 71. Place the following into DrRacketâ€™s definitions area:

; distances in terms of pixels:
(define HEIGHT 200)
(define MIDDLE (quotient HEIGHT 2))
(define WIDTH  400)
(define CENTER (quotient WIDTH 2))
 
(define-struct game [left-player right-player ball])
 
(define game0
  (make-game MIDDLE MIDDLE (make-posn CENTER CENTER)))

; Click RUN and evaluate the following expressions:

(game-ball game0)
(posn? (game-ball game0))
(game-left-player game0)

; Explain the results with step-by-step computations.

; ---

(game-ball game0) == (game-ball (make-game MIDDLE MIDDLE (make-posn CENTER CENTER)))
(game-ball game0) == (game-ball (make-game MIDDLE MIDDLE (make-posn (quotient WIDTH 2) (quotient WIDTH 2))))
(game-ball game0) == (game-ball (make-game MIDDLE MIDDLE (make-posn (quotient 400 2) (quotient 400 2))))
(game-ball game0) == (game-ball (make-game MIDDLE MIDDLE (make-posn 200 200 )))
(game-ball game0) == (game-ball (make-game (quotient HEIGHT 2) (quotient HEIGHT 2) (make-posn 200 200)))
(game-ball game0) == (game-ball (make-game (quotient 200 2) (quotient 200 2) (make-posn 200 200)))
(game-ball game0) == (game-ball (make-game 100 100 (make-posn 200 200)))
(game-ball game0) == (make-posn 200 200)

(posn? (game-ball game0)) == (posn? (game-ball (make-game MIDDLE MIDDLE (make-posn CENTER CENTER))))
(posn? (game-ball game0)) == (posn? (game-ball (make-game MIDDLE MIDDLE (make-posn (quotient WIDTH 2) (quotient WIDTH 2)))))
(posn? (game-ball game0)) == (posn? (game-ball (make-game MIDDLE MIDDLE (make-posn (quotient 400 2) (quotient 400 2)))))
(posn? (game-ball game0)) == (posn? (game-ball (make-game MIDDLE MIDDLE (make-posn 200 200))))
(posn? (game-ball game0)) == (posn? (game-ball (make-game (quotient HEIGHT 2) (quotient HEIGHT 2) (make-posn 200 200))))
(posn? (game-ball game0)) == (posn? (game-ball (make-game (quotient 200 2) (quotient 200 2) (make-posn 200 200))))
(posn? (game-ball game0)) == (posn? (game-ball (make-game 100 100 (make-posn 200 200))))
(posn? (game-ball game0)) == (posn? (make-posn 200 200))
(posn? (game-ball game0)) == #true

(game-left-player game0) == (game-left-player (make-game MIDDLE MIDDLE (make-posn CENTER CENTER)))
(game-left-player game0) == (game-left-player (make-game MIDDLE MIDDLE (make-posn (quotient WIDTH 2) (quotient WIDTH 2))))
(game-left-player game0) == (game-left-player (make-game MIDDLE MIDDLE (make-posn (quotient 400 2) (quotient 400 2))))
(game-left-player game0) == (game-left-player (make-game MIDDLE MIDDLE (make-posn 200 200 )))
(game-left-player game0) == (game-left-player (make-game (quotient HEIGHT 2) (quotient HEIGHT 2) (make-posn 200 200)))
(game-left-player game0) == (game-left-player (make-game (quotient 200 2) (quotient 200 2) (make-posn 200 200)))
(game-left-player game0) == (game-left-player (make-game 100 100 (make-posn 200 200)))
(game-left-player game0) == 100

; ===
