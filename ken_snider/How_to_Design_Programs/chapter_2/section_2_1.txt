;Exercise 11. Define a function that consumes two numbers, x and y, and that computes the distance of point (x,y) to the origin.
;In exercise 1 you developed the right-hand side of this function for concrete values of x and y. Now add a header.

(define (fdist x y) (sqrt (+ (* x x) (* y y))))

;Exercise 12. Define the function cvolume, which accepts the length of a side of an equilateral cube and computes its volume. If you have time, consider defining csurface, too.

(define (cvolume x) (expt x 3)) 
(define (csurface x) (* 6 (expt x 2)))

;Exercise 13 Define the function string-first, which extracts the first 1String from a non-empty string.

(define (string-first x) (string-ith x 1))

;Exercise 14. Define the function string-last, which extracts the last 1String from a non-empty string. 

(define (string-first x) (string-ith x (- (string-length x) 1)))

;Exercise 15. Define ==>. The function consumes two Boolean values, call them sunny and friday. Its answer is #true if sunny is false or friday is true.

(define (==> sunny friday) (or (false? sunny) friday))

;Exercise 16. Define the function image-area, which counts the number of pixels in a given image. See exercise 6 for ideas. 

(define (image-area x) (* (image-width x) (image-height x)))

;Exercise 17. Define the function image-classify, which consumes an image and conditionally produces "tall" if the image is taller than wide, "wide" if it is wider than tall, or "square" if its width and height are the same. See exercise 8 for ideas. 

(define (image-classify x)
  (if
    (>= (image-height x) (image-width x))
    "tall"
    "wide"
  )
)

;Exercise 18. Define the function string-join, which consumes two strings and appends them with "_" in between. See exercise 2 for ideas. 

(define (string-join x y (string_append x "_" y)))

;Exercise 19. Define the function string-insert, which consumes a string str plus a number i and inserts "_" at the ith position of str. Assume i is a number between 0 and the length of the given string (inclusive). See exercise 3 for ideas. Ponder how string-insert copes with "". 

(define (string-insert str i) (string-append (substring str 0 i) "_" (substring str i)))

;Exercise 20. Define the function string-delete, which consumes a string plus a number i and deletes the ith position from str. Assume i is a number between 0 (inclusive) and the length of the given string (exclusive). See exercise 4 for ideas. Can string-delete deal with empty strings? 

(define (string-delete str i) (string-append (substring str 0 i) (substring str (+ i 1))))
